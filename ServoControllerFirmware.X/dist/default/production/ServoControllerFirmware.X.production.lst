

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Jun 30 20:17:03 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     	;# 
    14  0001                     	;# 
    15  0002                     	;# 
    16  0003                     	;# 
    17  0004                     	;# 
    18  0005                     	;# 
    19  0006                     	;# 
    20  000A                     	;# 
    21  000B                     	;# 
    22  000C                     	;# 
    23  000E                     	;# 
    24  000E                     	;# 
    25  000F                     	;# 
    26  0010                     	;# 
    27  0011                     	;# 
    28  0012                     	;# 
    29  0015                     	;# 
    30  0015                     	;# 
    31  0016                     	;# 
    32  0017                     	;# 
    33  0018                     	;# 
    34  0019                     	;# 
    35  001A                     	;# 
    36  001F                     	;# 
    37  0081                     	;# 
    38  0085                     	;# 
    39  0086                     	;# 
    40  008C                     	;# 
    41  008E                     	;# 
    42  0092                     	;# 
    43  0098                     	;# 
    44  0099                     	;# 
    45  009A                     	;# 
    46  009B                     	;# 
    47  009C                     	;# 
    48  009D                     	;# 
    49  009F                     	;# 
    50                           
    51                           	psect	idataCOMMON
    52  00D5                     __pidataCOMMON:	
    53                           
    54                           ;initializer for _servo1SliderVal
    55  00D5  34BA               	retlw	186
    56                           
    57                           ;initializer for _servo2SliderVal
    58  00D6  34BA               	retlw	186
    59                           
    60                           ;initializer for _servo3SliderVal
    61  00D7  34BB               	retlw	187
    62                           
    63                           ;initializer for _servo4SliderVal
    64  00D8  34B7               	retlw	183
    65                           
    66                           ;initializer for _servo5SliderVal
    67  00D9  34B9               	retlw	185
    68  001F                     _CMCON	set	31
    69  000B                     _INTCON	set	11
    70  000C                     _PIR1	set	12
    71  0005                     _PORTA	set	5
    72  0006                     _PORTB	set	6
    73  001A                     _RCREG	set	26
    74  0018                     _RCSTA	set	24
    75  0012                     _T2CON	set	18
    76  0019                     _TXREG	set	25
    77  0028                     _RA0	set	40
    78  0029                     _RA1	set	41
    79  002A                     _RA2	set	42
    80  002B                     _RA3	set	43
    81  0030                     _RB0	set	48
    82  0035                     _RB5	set	53
    83  0065                     _RCIF	set	101
    84  0061                     _TMR2IF	set	97
    85  008C                     _PIE1	set	140
    86  0092                     _PR2	set	146
    87  0099                     _SPBRG	set	153
    88  0085                     _TRISA	set	133
    89  0086                     _TRISB	set	134
    90  0098                     _TXSTA	set	152
    91  04C1                     _TRMT	set	1217
    92                           
    93                           ; #config settings
    94  0000                     
    95                           	psect	cinit
    96  0011                     start_initialization:	
    97  0011                     __initialization:	
    98                           
    99                           ; Clear objects allocated to COMMON
   100  0011  01FA               	clrf	__pbssCOMMON& (0+127)
   101  0012  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   102  0013  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   103                           
   104                           ; Initialize objects allocated to COMMON
   105  0014  20D5               	fcall	__pidataCOMMON	;fetch initializer
   106  0015  00F0               	movwf	__pdataCOMMON& (0+127)
   107  0016  20D6               	fcall	__pidataCOMMON+1	;fetch initializer
   108  0017  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   109  0018  20D7               	fcall	__pidataCOMMON+2	;fetch initializer
   110  0019  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   111  001A  20D8               	fcall	__pidataCOMMON+3	;fetch initializer
   112  001B  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   113  001C  20D9               	fcall	__pidataCOMMON+4	;fetch initializer
   114  001D  00F4               	movwf	(__pdataCOMMON+4)& (0+127)
   115  001E                     end_of_initialization:	
   116                           ;End of C runtime variable initialization code
   117                           
   118  001E                     __end_of__initialization:	
   119  001E  0183               	clrf	3
   120  001F  28AE               	ljmp	_main	;jump to C main() function
   121                           
   122                           	psect	bssCOMMON
   123  007A                     __pbssCOMMON:	
   124  007A                     _part:	
   125  007A                     	ds	1
   126  007B                     _receiveCounter:	
   127  007B                     	ds	1
   128  007C                     _sawtoothCounter:	
   129  007C                     	ds	1
   130                           
   131                           	psect	dataCOMMON
   132  0070                     __pdataCOMMON:	
   133  0070                     _servo1SliderVal:	
   134  0070                     	ds	1
   135  0071                     _servo2SliderVal:	
   136  0071                     	ds	1
   137  0072                     _servo3SliderVal:	
   138  0072                     	ds	1
   139  0073                     _servo4SliderVal:	
   140  0073                     	ds	1
   141  0074                     _servo5SliderVal:	
   142  0074                     	ds	1
   143                           
   144                           	psect	cstackCOMMON
   145  0075                     __pcstackCOMMON:	
   146  0075                     ?_isr:	
   147  0075                     ??_isr:	
   148                           ; 1 bytes @ 0x0
   149                           
   150  0075                     ?_main:	
   151                           ; 1 bytes @ 0x0
   152                           
   153                           
   154                           ; 1 bytes @ 0x0
   155  0075                     	ds	5
   156  007A                     ??_main:	
   157                           
   158                           	psect	maintext
   159  00AE                     __pmaintext:	
   160                           ; 1 bytes @ 0x5
   161 ;;
   162 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   163 ;;
   164 ;; *************** function _main *****************
   165 ;; Defined at:
   166 ;;		line 213 in file "ServoController.c"
   167 ;; Parameters:    Size  Location     Type
   168 ;;		None
   169 ;; Auto vars:     Size  Location     Type
   170 ;;		None
   171 ;; Return value:  Size  Location     Type
   172 ;;                  1    wreg      void 
   173 ;; Registers used:
   174 ;;		wreg, status,2
   175 ;; Tracked objects:
   176 ;;		On entry : B00/0
   177 ;;		On exit  : 0/0
   178 ;;		Unchanged: 0/0
   179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   180 ;;      Params:         0       0       0       0
   181 ;;      Locals:         0       0       0       0
   182 ;;      Temps:          0       0       0       0
   183 ;;      Totals:         0       0       0       0
   184 ;;Total ram usage:        0 bytes
   185 ;; Hardware stack levels required when called:    1
   186 ;; This function calls:
   187 ;;		Nothing
   188 ;; This function is called by:
   189 ;;		Startup code after reset
   190 ;; This function uses a non-reentrant model
   191 ;;
   192                           
   193                           
   194                           ;psect for function _main
   195  00AE                     _main:	
   196                           
   197                           ;ServoController.c: 217: PORTA = 0b00000000;
   198                           
   199                           ;incstack = 0
   200                           ; Regs used in _main: [wreg+status,2]
   201  00AE  1283               	bcf	3,5	;RP0=0, select bank0
   202  00AF  1303               	bcf	3,6	;RP1=0, select bank0
   203  00B0  0185               	clrf	5	;volatile
   204                           
   205                           ;ServoController.c: 218: PORTB = 0b00000000;
   206  00B1  0186               	clrf	6	;volatile
   207                           
   208                           ;ServoController.c: 219: SPBRG = 39;
   209  00B2  3027               	movlw	39
   210  00B3  1683               	bsf	3,5	;RP0=1, select bank1
   211  00B4  1303               	bcf	3,6	;RP1=0, select bank1
   212  00B5  0099               	movwf	25	;volatile
   213                           
   214                           ;ServoController.c: 220: TXSTA = 0b10100100;
   215  00B6  30A4               	movlw	164
   216  00B7  0098               	movwf	24	;volatile
   217                           
   218                           ;ServoController.c: 221: RCSTA = 0b10010000;
   219  00B8  3090               	movlw	144
   220  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   221  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   222  00BB  0098               	movwf	24	;volatile
   223                           
   224                           ;ServoController.c: 222: CMCON = 0b00000111;
   225  00BC  3007               	movlw	7
   226  00BD  009F               	movwf	31	;volatile
   227                           
   228                           ;ServoController.c: 223: TRISA = 0b00000000;
   229  00BE  1683               	bsf	3,5	;RP0=1, select bank1
   230  00BF  1303               	bcf	3,6	;RP1=0, select bank1
   231  00C0  0185               	clrf	5	;volatile
   232                           
   233                           ;ServoController.c: 224: TRISB = 0b00000110;
   234  00C1  3006               	movlw	6
   235  00C2  0086               	movwf	6	;volatile
   236                           
   237                           ;ServoController.c: 225: T2CON = 0b00000101;
   238  00C3  3005               	movlw	5
   239  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   240  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   241  00C6  0092               	movwf	18	;volatile
   242                           
   243                           ;ServoController.c: 226: PR2 = 124;
   244  00C7  307C               	movlw	124
   245  00C8  1683               	bsf	3,5	;RP0=1, select bank1
   246  00C9  1303               	bcf	3,6	;RP1=0, select bank1
   247  00CA  0092               	movwf	18	;volatile
   248                           
   249                           ;ServoController.c: 227: PIR1 = 0b00000000;
   250  00CB  1283               	bcf	3,5	;RP0=0, select bank0
   251  00CC  1303               	bcf	3,6	;RP1=0, select bank0
   252  00CD  018C               	clrf	12	;volatile
   253                           
   254                           ;ServoController.c: 228: PIE1 = 0b00100010;
   255  00CE  3022               	movlw	34
   256  00CF  1683               	bsf	3,5	;RP0=1, select bank1
   257  00D0  1303               	bcf	3,6	;RP1=0, select bank1
   258  00D1  008C               	movwf	12	;volatile
   259                           
   260                           ;ServoController.c: 229: INTCON = 0b11000000;
   261  00D2  30C0               	movlw	192
   262  00D3  008B               	movwf	11	;volatile
   263  00D4                     l116:	
   264                           ;ServoController.c: 233: for(;1;);
   265                           
   266  00D4  28D4               	goto	l116
   267  00D5                     __end_of_main:	
   268                           
   269                           	psect	text1
   270  0020                     __ptext1:	
   271 ;; *************** function _isr *****************
   272 ;; Defined at:
   273 ;;		line 122 in file "ServoController.c"
   274 ;; Parameters:    Size  Location     Type
   275 ;;		None
   276 ;; Auto vars:     Size  Location     Type
   277 ;;		None
   278 ;; Return value:  Size  Location     Type
   279 ;;                  1    wreg      void 
   280 ;; Registers used:
   281 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   282 ;; Tracked objects:
   283 ;;		On entry : 0/0
   284 ;;		On exit  : 0/0
   285 ;;		Unchanged: 0/0
   286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   287 ;;      Params:         0       0       0       0
   288 ;;      Locals:         0       0       0       0
   289 ;;      Temps:          5       0       0       0
   290 ;;      Totals:         5       0       0       0
   291 ;;Total ram usage:        5 bytes
   292 ;; Hardware stack levels used:    1
   293 ;; This function calls:
   294 ;;		Nothing
   295 ;; This function is called by:
   296 ;;		Interrupt level 1
   297 ;; This function uses a non-reentrant model
   298 ;;
   299                           
   300                           
   301                           ;psect for function _isr
   302  0020                     _isr:	
   303                           
   304                           ;ServoController.c: 124: if (TMR2IF) {
   305  0020  1C8C               	btfss	12,1	;volatile
   306  0021  284A               	goto	i1l69
   307                           
   308                           ;ServoController.c: 126: ++sawtoothCounter;
   309  0022  3001               	movlw	1
   310  0023  00F5               	movwf	??_isr
   311  0024  0875               	movf	??_isr,w
   312  0025  07FC               	addwf	_sawtoothCounter,f	;volatile
   313                           
   314                           ;ServoController.c: 128: if (sawtoothCounter >= 180) {
   315  0026  30B4               	movlw	180
   316  0027  027C               	subwf	_sawtoothCounter,w	;volatile
   317  0028  1C03               	skipc
   318  0029  2849               	goto	i1l70
   319                           
   320                           ;ServoController.c: 130: if (sawtoothCounter >= 200) {
   321  002A  30C8               	movlw	200
   322  002B  027C               	subwf	_sawtoothCounter,w	;volatile
   323  002C  1C03               	skipc
   324  002D  2835               	goto	i1l591
   325                           
   326                           ;ServoController.c: 132: RA0 = 0;
   327  002E  1005               	bcf	5,0	;volatile
   328                           
   329                           ;ServoController.c: 133: RA1 = 0;
   330  002F  1085               	bcf	5,1	;volatile
   331                           
   332                           ;ServoController.c: 134: RA2 = 0;
   333  0030  1105               	bcf	5,2	;volatile
   334                           
   335                           ;ServoController.c: 135: RA3 = 0;
   336  0031  1185               	bcf	5,3	;volatile
   337                           
   338                           ;ServoController.c: 136: RB0 = 0;
   339  0032  1006               	bcf	6,0	;volatile
   340                           
   341                           ;ServoController.c: 138: sawtoothCounter = 0;
   342  0033  01FC               	clrf	_sawtoothCounter	;volatile
   343                           
   344                           ;ServoController.c: 140: } else {
   345  0034  2849               	goto	i1l70
   346  0035                     i1l591:	
   347                           
   348                           ;ServoController.c: 142: if (sawtoothCounter == servo1SliderVal) RA0 = 1;
   349  0035  087C               	movf	_sawtoothCounter,w	;volatile
   350  0036  0670               	xorwf	_servo1SliderVal,w	;volatile
   351  0037  1903               	btfsc	3,2
   352  0038  1405               	bsf	5,0	;volatile
   353                           
   354                           ;ServoController.c: 143: if (sawtoothCounter == servo2SliderVal) RA1 = 1;
   355  0039  087C               	movf	_sawtoothCounter,w	;volatile
   356  003A  0671               	xorwf	_servo2SliderVal,w	;volatile
   357  003B  1903               	btfsc	3,2
   358  003C  1485               	bsf	5,1	;volatile
   359                           
   360                           ;ServoController.c: 144: if (sawtoothCounter == servo3SliderVal) RA2 = 1;
   361  003D  087C               	movf	_sawtoothCounter,w	;volatile
   362  003E  0672               	xorwf	_servo3SliderVal,w	;volatile
   363  003F  1903               	btfsc	3,2
   364  0040  1505               	bsf	5,2	;volatile
   365                           
   366                           ;ServoController.c: 145: if (sawtoothCounter == servo4SliderVal) RA3 = 1;
   367  0041  087C               	movf	_sawtoothCounter,w	;volatile
   368  0042  0673               	xorwf	_servo4SliderVal,w	;volatile
   369  0043  1903               	btfsc	3,2
   370  0044  1585               	bsf	5,3	;volatile
   371                           
   372                           ;ServoController.c: 146: if (sawtoothCounter == servo5SliderVal) RB0 = 1;
   373  0045  087C               	movf	_sawtoothCounter,w	;volatile
   374  0046  0674               	xorwf	_servo5SliderVal,w	;volatile
   375  0047  1903               	btfsc	3,2
   376  0048  1406               	bsf	6,0	;volatile
   377  0049                     i1l70:	
   378                           
   379                           ;ServoController.c: 149: }
   380                           ;ServoController.c: 151: }
   381                           ;ServoController.c: 153: TMR2IF = 0;
   382  0049  108C               	bcf	12,1	;volatile
   383  004A                     i1l69:	
   384                           
   385                           ;ServoController.c: 155: }
   386                           ;ServoController.c: 157: if (RCIF) {
   387  004A  1E8C               	btfss	12,5	;volatile
   388  004B  28A3               	goto	i1l92
   389                           
   390                           ;ServoController.c: 159: ++receiveCounter;
   391  004C  3001               	movlw	1
   392  004D  00F5               	movwf	??_isr
   393  004E  0875               	movf	??_isr,w
   394  004F  07FB               	addwf	_receiveCounter,f	;volatile
   395                           
   396                           ;ServoController.c: 161: switch(receiveCounter) {
   397  0050  2898               	goto	i1l637
   398  0051                     i1l613:	
   399                           ;ServoController.c: 163: case 1:
   400                           
   401                           
   402                           ;ServoController.c: 164: RCREG = 0;
   403  0051  019A               	clrf	26	;volatile
   404                           
   405                           ;ServoController.c: 165: break;
   406  0052  28A3               	goto	i1l92
   407  0053                     i1l615:	
   408                           ;ServoController.c: 167: case 2:
   409                           
   410                           
   411                           ;ServoController.c: 168: part = RCREG;
   412  0053  081A               	movf	26,w	;volatile
   413  0054  00F5               	movwf	??_isr
   414  0055  0875               	movf	??_isr,w
   415  0056  00FA               	movwf	_part	;volatile
   416                           
   417                           ;ServoController.c: 169: break;
   418  0057  28A3               	goto	i1l92
   419  0058                     i1l617:	
   420                           ;ServoController.c: 171: case 3:
   421                           
   422                           
   423                           ;ServoController.c: 172: receiveCounter = 0;
   424  0058  01FB               	clrf	_receiveCounter	;volatile
   425                           
   426                           ;ServoController.c: 174: switch(part) {
   427  0059  2883               	goto	i1l633
   428  005A                     i1l619:	
   429                           ;ServoController.c: 176: case 0x3C: servo1SliderVal = (180 + (RCREG)); break;
   430                           
   431  005A  081A               	movf	26,w	;volatile
   432  005B  3EB4               	addlw	180
   433  005C  00F5               	movwf	??_isr
   434  005D  0875               	movf	??_isr,w
   435  005E  00F0               	movwf	_servo1SliderVal	;volatile
   436  005F  28A3               	goto	i1l92
   437  0060                     i1l621:	
   438                           ;ServoController.c: 177: case 0x3E: servo2SliderVal = (180 + (RCREG)); break;
   439                           
   440  0060  081A               	movf	26,w	;volatile
   441  0061  3EB4               	addlw	180
   442  0062  00F5               	movwf	??_isr
   443  0063  0875               	movf	??_isr,w
   444  0064  00F1               	movwf	_servo2SliderVal	;volatile
   445  0065  28A3               	goto	i1l92
   446  0066                     i1l623:	
   447                           ;ServoController.c: 178: case 0x40: servo3SliderVal = (180 + (RCREG)); break;
   448                           
   449  0066  081A               	movf	26,w	;volatile
   450  0067  3EB4               	addlw	180
   451  0068  00F5               	movwf	??_isr
   452  0069  0875               	movf	??_isr,w
   453  006A  00F2               	movwf	_servo3SliderVal	;volatile
   454  006B  28A3               	goto	i1l92
   455  006C                     i1l625:	
   456                           ;ServoController.c: 179: case 0x43: servo4SliderVal = (180 + (RCREG)); break;
   457                           
   458  006C  081A               	movf	26,w	;volatile
   459  006D  3EB4               	addlw	180
   460  006E  00F5               	movwf	??_isr
   461  006F  0875               	movf	??_isr,w
   462  0070  00F3               	movwf	_servo4SliderVal	;volatile
   463  0071  28A3               	goto	i1l92
   464  0072                     i1l627:	
   465                           ;ServoController.c: 180: case 0x45: servo5SliderVal = (180 + (RCREG)); break;
   466                           
   467  0072  081A               	movf	26,w	;volatile
   468  0073  3EB4               	addlw	180
   469  0074  00F5               	movwf	??_isr
   470  0075  0875               	movf	??_isr,w
   471  0076  00F4               	movwf	_servo5SliderVal	;volatile
   472  0077  28A3               	goto	i1l92
   473  0078                     i1l629:	
   474                           ;ServoController.c: 182: case 0x4A: RB5 = (RCREG > 0) ? 1 : 0; break;
   475                           
   476  0078  081A               	movf	26,w	;volatile
   477  0079  1903               	btfsc	3,2
   478  007A  287F               	goto	u10_20
   479  007B  1283               	bcf	3,5	;RP0=0, select bank0
   480  007C  1303               	bcf	3,6	;RP1=0, select bank0
   481  007D  1686               	bsf	6,5	;volatile
   482  007E  28A3               	goto	i1l92
   483  007F                     u10_20:	
   484  007F  1283               	bcf	3,5	;RP0=0, select bank0
   485  0080  1303               	bcf	3,6	;RP1=0, select bank0
   486  0081  1286               	bcf	6,5	;volatile
   487                           
   488                           ;ServoController.c: 184: }
   489  0082  28A3               	goto	i1l92
   490  0083                     i1l633:	
   491  0083  087A               	movf	_part,w	;volatile
   492                           
   493                           ; Switch size 1, requested type "space"
   494                           ; Number of cases is 6, Range of values is 60 to 74
   495                           ; switch strategies available:
   496                           ; Name         Instructions Cycles
   497                           ; simple_byte           19    10 (average)
   498                           ; direct_byte           24     9 (fixed)
   499                           ; jumptable            263     9 (fixed)
   500                           ;	Chosen strategy is simple_byte
   501  0084  3A3C               	xorlw	60	; case 60
   502  0085  1903               	skipnz
   503  0086  285A               	goto	i1l619
   504  0087  3A02               	xorlw	2	; case 62
   505  0088  1903               	skipnz
   506  0089  2860               	goto	i1l621
   507  008A  3A7E               	xorlw	126	; case 64
   508  008B  1903               	skipnz
   509  008C  2866               	goto	i1l623
   510  008D  3A03               	xorlw	3	; case 67
   511  008E  1903               	skipnz
   512  008F  286C               	goto	i1l625
   513  0090  3A06               	xorlw	6	; case 69
   514  0091  1903               	skipnz
   515  0092  2872               	goto	i1l627
   516  0093  3A0F               	xorlw	15	; case 74
   517  0094  1903               	skipnz
   518  0095  2878               	goto	i1l629
   519  0096  28A3               	goto	i1l92
   520                           
   521                           ;ServoController.c: 188: }
   522                           
   523                           ;ServoController.c: 186: break;
   524  0097  28A3               	goto	i1l92
   525  0098                     i1l637:	
   526  0098  087B               	movf	_receiveCounter,w	;volatile
   527                           
   528                           ; Switch size 1, requested type "space"
   529                           ; Number of cases is 3, Range of values is 1 to 3
   530                           ; switch strategies available:
   531                           ; Name         Instructions Cycles
   532                           ; simple_byte           10     6 (average)
   533                           ; direct_byte           12     9 (fixed)
   534                           ; jumptable            263     9 (fixed)
   535                           ;	Chosen strategy is simple_byte
   536  0099  3A01               	xorlw	1	; case 1
   537  009A  1903               	skipnz
   538  009B  2851               	goto	i1l613
   539  009C  3A03               	xorlw	3	; case 2
   540  009D  1903               	skipnz
   541  009E  2853               	goto	i1l615
   542  009F  3A01               	xorlw	1	; case 3
   543  00A0  1903               	skipnz
   544  00A1  2858               	goto	i1l617
   545  00A2  28A3               	goto	i1l92
   546  00A3                     i1l92:	
   547  00A3  0879               	movf	??_isr+4,w
   548  00A4  00FF               	movwf	127
   549  00A5  0878               	movf	??_isr+3,w
   550  00A6  008A               	movwf	10
   551  00A7  0877               	movf	??_isr+2,w
   552  00A8  0084               	movwf	4
   553  00A9  0E76               	swapf	(??_isr+1)^(0+-128),w
   554  00AA  0083               	movwf	3
   555  00AB  0EFE               	swapf	126,f
   556  00AC  0E7E               	swapf	126,w
   557  00AD  0009               	retfie
   558  00AE                     __end_of_isr:	
   559  007E                     btemp	set	126	;btemp
   560  007E                     wtemp	set	126
   561  007E                     wtemp0	set	126
   562  0080                     wtemp1	set	128
   563  0082                     wtemp2	set	130
   564  0084                     wtemp3	set	132
   565  0086                     wtemp4	set	134
   566  0088                     wtemp5	set	136
   567  007F                     wtemp6	set	127
   568  007E                     ttemp	set	126
   569  007E                     ttemp0	set	126
   570  0081                     ttemp1	set	129
   571  0084                     ttemp2	set	132
   572  0087                     ttemp3	set	135
   573  007F                     ttemp4	set	127
   574  007E                     ltemp	set	126
   575  007E                     ltemp0	set	126
   576  0082                     ltemp1	set	130
   577  0086                     ltemp2	set	134
   578  0080                     ltemp3	set	128
   579                           
   580                           	psect	intentry
   581  0004                     __pintentry:	
   582                           ;incstack = 0
   583                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0]
   584                           
   585  0004                     interrupt_function:	
   586  007E                     saved_w	set	btemp
   587  0004  00FE               	movwf	btemp
   588  0005  0E03               	swapf	3,w
   589  0006  00F6               	movwf	??_isr+1
   590  0007  0804               	movf	4,w
   591  0008  00F7               	movwf	??_isr+2
   592  0009  080A               	movf	10,w
   593  000A  00F8               	movwf	??_isr+3
   594  000B  1283               	bcf	3,5	;RP0=0, select bank0
   595  000C  1303               	bcf	3,6	;RP1=0, select bank0
   596  000D  087F               	movf	btemp+1,w
   597  000E  00F9               	movwf	??_isr+4
   598  000F  2820               	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      13
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       D      10        0.0%
ABS                  0      0       D       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Jun 30 20:17:03 2016

             __CFG_CP$ON 0000              __CFG_CPD$ON 0000                      l116 00D4  
                    _RA0 0028                      _RA1 0029                      _RB0 0030  
                    _RA2 002A                      _RA3 002B                      _RB5 0035  
                    _PR2 0092                      _isr 0020                      fsr0 0004  
           __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000                     ?_isr 0075  
                   _PIE1 008C                     _RCIF 0065                     i1l70 0049  
                   _PIR1 000C                     i1l92 00A3                     i1l69 004A  
                   _TRMT 04C1                     _main 00AE                     _part 007A  
                   btemp 007E            __CFG_BOREN$ON 0000                     ltemp 007E  
                   start 0010                     ttemp 007E                     wtemp 007E  
                  ??_isr 0075                    ?_main 0075            __CFG_WDTE$OFF 0000  
                  _CMCON 001F                    _T2CON 0012          _servo1SliderVal 0070  
                  i1l621 0060                    i1l613 0051                    i1l623 0066  
                  i1l615 0053                    i1l625 006C                    i1l633 0083  
                  i1l617 0058                    i1l627 0072                    i1l619 005A  
                  i1l629 0078                    i1l637 0098                    i1l591 0035  
                  _RCREG 001A                    u10_20 007F                    _RCSTA 0018  
                  _SPBRG 0099                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    _TXREG 0019  
                  _TXSTA 0098            __CFG_PWRTE$ON 0000          _servo2SliderVal 0071  
        _servo3SliderVal 0072                    pclath 000A                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
        _servo4SliderVal 0073                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          _servo5SliderVal 0074  
         __CFG_MCLRE$OFF 0000          __initialization 0011             __end_of_main 00D5  
                 ??_main 007A                   _INTCON 000B                   _TMR2IF 0061  
           __pdataCOMMON 0070                   saved_w 007E  __end_of__initialization 001E  
         __pcstackCOMMON 0075               __pmaintext 00AE               __pintentry 0004  
                __ptext1 0020             __size_of_isr 008E     end_of_initialization 001E  
        _sawtoothCounter 007C            __pidataCOMMON 00D5      start_initialization 0011  
            __end_of_isr 00AE              __pbssCOMMON 007A                ___latbits 0000  
      interrupt_function 0004            __size_of_main 0027           _receiveCounter 007B  
               intlevel1 0000  
