

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 03 12:21:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F628A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  008C                     	;# 
    83  008E                     	;# 
    84  0092                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009F                     	;# 
    92                           
    93                           	psect	idataCOMMON
    94  0104                     __pidataCOMMON:	
    95                           
    96                           ;initializer for _eyelidsSawtoothThreshold
    97  0104  34B9               	retlw	185
    98                           
    99                           ;initializer for _lowerJawSawtoothThreshold
   100  0105  34B7               	retlw	183
   101                           
   102                           ;initializer for _rightLipCornerSawtoothThreshold
   103  0106  34BB               	retlw	187
   104                           
   105                           ;initializer for _leftLipCornerSawtoothThreshold
   106  0107  34BA               	retlw	186
   107                           
   108                           ;initializer for _eyebrowSawtoothThreshold
   109  0108  34BA               	retlw	186
   110  001A                     _RCREG	set	26
   111  0012                     _T2CON	set	18
   112  005F                     _GIE	set	95
   113  005E                     _PEIE	set	94
   114  0035                     _RB5	set	53
   115  0065                     _RCIF	set	101
   116  002C                     _RA4	set	44
   117  002B                     _RA3	set	43
   118  002A                     _RA2	set	42
   119  0029                     _RA1	set	41
   120  0028                     _RA0	set	40
   121  00C2                     _FERR	set	194
   122  00C1                     _OERR	set	193
   123  00C7                     _SPEN	set	199
   124  00C4                     _CREN	set	196
   125  0092                     _TMR2ON	set	146
   126  0061                     _TMR2IF	set	97
   127  0099                     _SPBRG	set	153
   128  0092                     _PR2	set	146
   129  0433                     _TRISB3	set	1075
   130  0430                     _TRISB0	set	1072
   131  042B                     _TRISA3	set	1067
   132  042A                     _TRISA2	set	1066
   133  0429                     _TRISA1	set	1065
   134  0428                     _TRISA0	set	1064
   135  04C2                     _BRGH	set	1218
   136  0431                     _TRISB1	set	1073
   137  0461                     _TMR2IE	set	1121
   138                           
   139                           ; #config settings
   140  0000                     
   141                           	psect	cinit
   142  0011                     start_initialization:	
   143  0011                     __initialization:	
   144                           
   145                           ; Initialize objects allocated to COMMON
   146  0011  2104               	fcall	__pidataCOMMON	;fetch initializer
   147  0012  00F0               	movwf	__pdataCOMMON& (0+127)
   148  0013  2105               	fcall	__pidataCOMMON+1	;fetch initializer
   149  0014  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   150  0015  2106               	fcall	__pidataCOMMON+2	;fetch initializer
   151  0016  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   152  0017  2107               	fcall	__pidataCOMMON+3	;fetch initializer
   153  0018  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   154  0019  2108               	fcall	__pidataCOMMON+4	;fetch initializer
   155  001A  00F4               	movwf	(__pdataCOMMON+4)& (0+127)
   156                           
   157                           ; Clear objects allocated to BANK0
   158  001B  01A0               	clrf	__pbssBANK0& (0+127)
   159  001C  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   160                           
   161                           ; Clear objects allocated to COMMON
   162  001D  01FA               	clrf	__pbssCOMMON& (0+127)
   163  001E  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   164  001F  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   165  0020                     end_of_initialization:	
   166                           ;End of C runtime variable initialization code
   167                           
   168  0020                     __end_of__initialization:	
   169  0020  0183               	clrf	3
   170  0021  28B2               	ljmp	_main	;jump to C main() function
   171                           
   172                           	psect	bssCOMMON
   173  007A                     __pbssCOMMON:	
   174  007A                     _sawtoothCounter:	
   175  007A                     	ds	1
   176  007B                     _receiveCounter:	
   177  007B                     	ds	1
   178  007C                     _partMidiNote:	
   179  007C                     	ds	1
   180                           
   181                           	psect	dataCOMMON
   182  0070                     __pdataCOMMON:	
   183  0070                     _eyelidsSawtoothThreshold:	
   184  0070                     	ds	1
   185  0071                     _lowerJawSawtoothThreshold:	
   186  0071                     	ds	1
   187  0072                     _rightLipCornerSawtoothThreshold:	
   188  0072                     	ds	1
   189  0073                     _leftLipCornerSawtoothThreshold:	
   190  0073                     	ds	1
   191  0074                     _eyebrowSawtoothThreshold:	
   192  0074                     	ds	1
   193                           
   194                           	psect	bssBANK0
   195  0020                     __pbssBANK0:	
   196  0020                     clearFramingError@temp:	
   197  0020                     	ds	1
   198  0021                     clearOverrunError@temp:	
   199  0021                     	ds	1
   200                           
   201                           	psect	cstackCOMMON
   202  0075                     __pcstackCOMMON:	
   203  0075                     ?_initTMR2:	
   204  0075                     ?_initUSART:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0075                     ?_clearOverrunError:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0075                     ?_clearFramingError:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0075                     ?_initServos:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0075                     ?_isr:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0075                     ??_isr:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0075                     ?_main:	
   223                           ; 1 bytes @ 0x0
   224                           
   225                           
   226                           ; 1 bytes @ 0x0
   227  0075                     	ds	5
   228                           
   229                           	psect	cstackBANK0
   230  0022                     __pcstackBANK0:	
   231  0022                     ??_initTMR2:	
   232  0022                     ??_initUSART:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0022                     ??_clearOverrunError:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0022                     ??_clearFramingError:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0022                     ??_initServos:	
   242                           ; 1 bytes @ 0x0
   243                           
   244                           
   245                           ; 1 bytes @ 0x0
   246  0022                     	ds	1
   247  0023                     ??_main:	
   248                           
   249                           	psect	maintext
   250  00B2                     __pmaintext:	
   251                           ; 1 bytes @ 0x1
   252 ;;
   253 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   254 ;;
   255 ;; *************** function _main *****************
   256 ;; Defined at:
   257 ;;		line 108 in file "ServoController.c"
   258 ;; Parameters:    Size  Location     Type
   259 ;;		None
   260 ;; Auto vars:     Size  Location     Type
   261 ;;		None
   262 ;; Return value:  Size  Location     Type
   263 ;;                  1    wreg      void 
   264 ;; Registers used:
   265 ;;		wreg, status,2, status,0, pclath, cstack
   266 ;; Tracked objects:
   267 ;;		On entry : B00/0
   268 ;;		On exit  : 0/0
   269 ;;		Unchanged: 0/0
   270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   271 ;;      Params:         0       0       0       0
   272 ;;      Locals:         0       0       0       0
   273 ;;      Temps:          0       0       0       0
   274 ;;      Totals:         0       0       0       0
   275 ;;Total ram usage:        0 bytes
   276 ;; Hardware stack levels required when called:    2
   277 ;; This function calls:
   278 ;;		_clearFramingError
   279 ;;		_clearOverrunError
   280 ;;		_initServos
   281 ;;		_initTMR2
   282 ;;		_initUSART
   283 ;; This function is called by:
   284 ;;		Startup code after reset
   285 ;; This function uses a non-reentrant model
   286 ;;
   287                           
   288                           
   289                           ;psect for function _main
   290  00B2                     _main:	
   291                           
   292                           ;ServoController.c: 112: initServos();
   293                           
   294                           ;incstack = 0
   295                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   296  00B2  20FB               	fcall	_initServos
   297                           
   298                           ;ServoController.c: 113: initUSART();
   299  00B3  20F0               	fcall	_initUSART
   300                           
   301                           ;ServoController.c: 114: initTMR2();
   302  00B4  20C2               	fcall	_initTMR2
   303                           
   304                           ;ServoController.c: 116: PEIE = 1;
   305  00B5  170B               	bsf	11,6	;volatile
   306                           
   307                           ;ServoController.c: 117: GIE = 1;
   308  00B6  178B               	bsf	11,7	;volatile
   309  00B7                     l790:	
   310                           ;ServoController.c: 123: while(1) {
   311                           
   312                           
   313                           ;ServoController.c: 124: if (OERR)
   314  00B7  1283               	bcf	3,5	;RP0=0, select bank0
   315  00B8  1303               	bcf	3,6	;RP1=0, select bank0
   316  00B9  1C98               	btfss	24,1	;volatile
   317  00BA  28BC               	goto	l794
   318                           
   319                           ;ServoController.c: 125: clearOverrunError();
   320  00BB  20D2               	fcall	_clearOverrunError
   321  00BC                     l794:	
   322                           
   323                           ;ServoController.c: 126: if(FERR)
   324  00BC  1283               	bcf	3,5	;RP0=0, select bank0
   325  00BD  1303               	bcf	3,6	;RP1=0, select bank0
   326  00BE  1D18               	btfss	24,2	;volatile
   327  00BF  28B7               	goto	l790
   328                           
   329                           ;ServoController.c: 127: clearFramingError();
   330  00C0  20E1               	fcall	_clearFramingError
   331  00C1  28B7               	goto	l790
   332  00C2                     __end_of_main:	
   333                           
   334                           	psect	text1
   335  00F0                     __ptext1:	
   336 ;; *************** function _initUSART *****************
   337 ;; Defined at:
   338 ;;		line 52 in file "usart.h"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;		None
   343 ;; Return value:  Size  Location     Type
   344 ;;                  1    wreg      void 
   345 ;; Registers used:
   346 ;;		wreg
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   352 ;;      Params:         0       0       0       0
   353 ;;      Locals:         0       0       0       0
   354 ;;      Temps:          0       0       0       0
   355 ;;      Totals:         0       0       0       0
   356 ;;Total ram usage:        0 bytes
   357 ;; Hardware stack levels used:    1
   358 ;; Hardware stack levels required when called:    1
   359 ;; This function calls:
   360 ;;		Nothing
   361 ;; This function is called by:
   362 ;;		_main
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           
   367                           ;psect for function _initUSART
   368  00F0                     _initUSART:	
   369                           
   370                           ;usart.h: 53: TRISB1 = 1;
   371                           
   372                           ;incstack = 0
   373                           ; Regs used in _initUSART: [wreg]
   374  00F0  1683               	bsf	3,5	;RP0=1, select bank1
   375  00F1  1303               	bcf	3,6	;RP1=0, select bank1
   376  00F2  1486               	bsf	6,1	;volatile
   377                           
   378                           ;usart.h: 54: SPBRG = 39;
   379  00F3  3027               	movlw	39
   380  00F4  0099               	movwf	25	;volatile
   381                           
   382                           ;usart.h: 55: BRGH = 1;
   383  00F5  1518               	bsf	24,2	;volatile
   384                           
   385                           ;usart.h: 56: CREN = 1;
   386  00F6  1283               	bcf	3,5	;RP0=0, select bank0
   387  00F7  1303               	bcf	3,6	;RP1=0, select bank0
   388  00F8  1618               	bsf	24,4	;volatile
   389                           
   390                           ;usart.h: 57: SPEN = 1;
   391  00F9  1798               	bsf	24,7	;volatile
   392  00FA  0008               	return
   393  00FB                     __end_of_initUSART:	
   394                           
   395                           	psect	text2
   396  00C2                     __ptext2:	
   397 ;; *************** function _initTMR2 *****************
   398 ;; Defined at:
   399 ;;		line 44 in file "tmr2.h"
   400 ;; Parameters:    Size  Location     Type
   401 ;;		None
   402 ;; Auto vars:     Size  Location     Type
   403 ;;		None
   404 ;; Return value:  Size  Location     Type
   405 ;;                  1    wreg      void 
   406 ;; Registers used:
   407 ;;		wreg
   408 ;; Tracked objects:
   409 ;;		On entry : 0/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   413 ;;      Params:         0       0       0       0
   414 ;;      Locals:         0       0       0       0
   415 ;;      Temps:          0       0       0       0
   416 ;;      Totals:         0       0       0       0
   417 ;;Total ram usage:        0 bytes
   418 ;; Hardware stack levels used:    1
   419 ;; Hardware stack levels required when called:    1
   420 ;; This function calls:
   421 ;;		Nothing
   422 ;; This function is called by:
   423 ;;		_main
   424 ;; This function uses a non-reentrant model
   425 ;;
   426                           
   427                           
   428                           ;psect for function _initTMR2
   429  00C2                     _initTMR2:	
   430                           
   431                           ;tmr2.h: 45: PR2 = 124;
   432                           
   433                           ;incstack = 0
   434                           ; Regs used in _initTMR2: [wreg]
   435  00C2  307C               	movlw	124
   436  00C3  1683               	bsf	3,5	;RP0=1, select bank1
   437  00C4  1303               	bcf	3,6	;RP1=0, select bank1
   438  00C5  0092               	movwf	18	;volatile
   439                           
   440                           ;tmr2.h: 46: T2CON = 0b00000001;
   441  00C6  3001               	movlw	1
   442  00C7  1283               	bcf	3,5	;RP0=0, select bank0
   443  00C8  1303               	bcf	3,6	;RP1=0, select bank0
   444  00C9  0092               	movwf	18	;volatile
   445                           
   446                           ;tmr2.h: 47: TMR2IF = 0;
   447  00CA  108C               	bcf	12,1	;volatile
   448                           
   449                           ;tmr2.h: 48: TMR2IE = 1;
   450  00CB  1683               	bsf	3,5	;RP0=1, select bank1
   451  00CC  1303               	bcf	3,6	;RP1=0, select bank1
   452  00CD  148C               	bsf	12,1	;volatile
   453                           
   454                           ;tmr2.h: 49: TMR2ON = 1;
   455  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   456  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   457  00D0  1512               	bsf	18,2	;volatile
   458  00D1  0008               	return
   459  00D2                     __end_of_initTMR2:	
   460                           
   461                           	psect	text3
   462  00FB                     __ptext3:	
   463 ;; *************** function _initServos *****************
   464 ;; Defined at:
   465 ;;		line 92 in file "ServoController.h"
   466 ;; Parameters:    Size  Location     Type
   467 ;;		None
   468 ;; Auto vars:     Size  Location     Type
   469 ;;		None
   470 ;; Return value:  Size  Location     Type
   471 ;;                  1    wreg      void 
   472 ;; Registers used:
   473 ;;		None
   474 ;; Tracked objects:
   475 ;;		On entry : 0/0
   476 ;;		On exit  : 0/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   479 ;;      Params:         0       0       0       0
   480 ;;      Locals:         0       0       0       0
   481 ;;      Temps:          0       0       0       0
   482 ;;      Totals:         0       0       0       0
   483 ;;Total ram usage:        0 bytes
   484 ;; Hardware stack levels used:    1
   485 ;; Hardware stack levels required when called:    1
   486 ;; This function calls:
   487 ;;		Nothing
   488 ;; This function is called by:
   489 ;;		_main
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           
   494                           ;psect for function _initServos
   495  00FB                     _initServos:	
   496                           
   497                           ;ServoController.h: 93: TRISA0 = 0;
   498                           
   499                           ;incstack = 0
   500                           ; Regs used in _initServos: []
   501  00FB  1683               	bsf	3,5	;RP0=1, select bank1
   502  00FC  1303               	bcf	3,6	;RP1=0, select bank1
   503  00FD  1005               	bcf	5,0	;volatile
   504                           
   505                           ;ServoController.h: 94: TRISA1 = 0;
   506  00FE  1085               	bcf	5,1	;volatile
   507                           
   508                           ;ServoController.h: 95: TRISA2 = 0;
   509  00FF  1105               	bcf	5,2	;volatile
   510                           
   511                           ;ServoController.h: 96: TRISA3 = 0;
   512  0100  1185               	bcf	5,3	;volatile
   513                           
   514                           ;ServoController.h: 97: TRISB0 = 0;
   515  0101  1006               	bcf	6,0	;volatile
   516                           
   517                           ;ServoController.h: 98: TRISB3 = 0;
   518  0102  1186               	bcf	6,3	;volatile
   519  0103  0008               	return
   520  0104                     __end_of_initServos:	
   521                           
   522                           	psect	text4
   523  00D2                     __ptext4:	
   524 ;; *************** function _clearOverrunError *****************
   525 ;; Defined at:
   526 ;;		line 65 in file "usart.h"
   527 ;; Parameters:    Size  Location     Type
   528 ;;		None
   529 ;; Auto vars:     Size  Location     Type
   530 ;;		None
   531 ;; Return value:  Size  Location     Type
   532 ;;                  1    wreg      void 
   533 ;; Registers used:
   534 ;;		wreg
   535 ;; Tracked objects:
   536 ;;		On entry : 0/0
   537 ;;		On exit  : 0/0
   538 ;;		Unchanged: 0/0
   539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   540 ;;      Params:         0       0       0       0
   541 ;;      Locals:         0       0       0       0
   542 ;;      Temps:          0       1       0       0
   543 ;;      Totals:         0       1       0       0
   544 ;;Total ram usage:        1 bytes
   545 ;; Hardware stack levels used:    1
   546 ;; Hardware stack levels required when called:    1
   547 ;; This function calls:
   548 ;;		Nothing
   549 ;; This function is called by:
   550 ;;		_main
   551 ;; This function uses a non-reentrant model
   552 ;;
   553                           
   554                           
   555                           ;psect for function _clearOverrunError
   556  00D2                     _clearOverrunError:	
   557  00D2                     l67:	
   558                           ;incstack = 0
   559                           ; Regs used in _clearOverrunError: [wreg]
   560                           ;usart.h: 66: static unsigned char temp = 0;
   561                           ;usart.h: 67: do {
   562                           
   563                           
   564                           ;usart.h: 68: temp = RCREG;
   565  00D2  1283               	bcf	3,5	;RP0=0, select bank0
   566  00D3  1303               	bcf	3,6	;RP1=0, select bank0
   567  00D4  081A               	movf	26,w	;volatile
   568  00D5  00A2               	movwf	??_clearOverrunError
   569  00D6  0822               	movf	??_clearOverrunError,w
   570  00D7  00A1               	movwf	clearOverrunError@temp
   571                           
   572                           ;usart.h: 69: temp = RCREG;
   573  00D8  081A               	movf	26,w	;volatile
   574  00D9  00A2               	movwf	??_clearOverrunError
   575  00DA  0822               	movf	??_clearOverrunError,w
   576  00DB  00A1               	movwf	clearOverrunError@temp
   577                           
   578                           ;usart.h: 70: CREN = 0;
   579  00DC  1218               	bcf	24,4	;volatile
   580                           
   581                           ;usart.h: 71: CREN = 1;
   582  00DD  1618               	bsf	24,4	;volatile
   583                           
   584                           ;usart.h: 72: } while(OERR);
   585  00DE  1C98               	btfss	24,1	;volatile
   586  00DF  0008               	return
   587  00E0  28D2               	goto	l67
   588  00E1                     __end_of_clearOverrunError:	
   589                           
   590                           	psect	text5
   591  00E1                     __ptext5:	
   592 ;; *************** function _clearFramingError *****************
   593 ;; Defined at:
   594 ;;		line 83 in file "usart.h"
   595 ;; Parameters:    Size  Location     Type
   596 ;;		None
   597 ;; Auto vars:     Size  Location     Type
   598 ;;		None
   599 ;; Return value:  Size  Location     Type
   600 ;;                  1    wreg      void 
   601 ;; Registers used:
   602 ;;		wreg
   603 ;; Tracked objects:
   604 ;;		On entry : 0/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   608 ;;      Params:         0       0       0       0
   609 ;;      Locals:         0       0       0       0
   610 ;;      Temps:          0       1       0       0
   611 ;;      Totals:         0       1       0       0
   612 ;;Total ram usage:        1 bytes
   613 ;; Hardware stack levels used:    1
   614 ;; Hardware stack levels required when called:    1
   615 ;; This function calls:
   616 ;;		Nothing
   617 ;; This function is called by:
   618 ;;		_main
   619 ;; This function uses a non-reentrant model
   620 ;;
   621                           
   622                           
   623                           ;psect for function _clearFramingError
   624  00E1                     _clearFramingError:	
   625  00E1                     l74:	
   626                           ;incstack = 0
   627                           ; Regs used in _clearFramingError: [wreg]
   628                           ;usart.h: 84: static unsigned char temp = 0;
   629                           ;usart.h: 85: do {
   630                           
   631                           
   632                           ;usart.h: 86: temp = RCREG;
   633  00E1  1283               	bcf	3,5	;RP0=0, select bank0
   634  00E2  1303               	bcf	3,6	;RP1=0, select bank0
   635  00E3  081A               	movf	26,w	;volatile
   636  00E4  00A2               	movwf	??_clearFramingError
   637  00E5  0822               	movf	??_clearFramingError,w
   638  00E6  00A0               	movwf	clearFramingError@temp
   639                           
   640                           ;usart.h: 87: temp = RCREG;
   641  00E7  081A               	movf	26,w	;volatile
   642  00E8  00A2               	movwf	??_clearFramingError
   643  00E9  0822               	movf	??_clearFramingError,w
   644  00EA  00A0               	movwf	clearFramingError@temp
   645                           
   646                           ;usart.h: 88: SPEN = 0;
   647  00EB  1398               	bcf	24,7	;volatile
   648                           
   649                           ;usart.h: 89: SPEN = 1;
   650  00EC  1798               	bsf	24,7	;volatile
   651                           
   652                           ;usart.h: 90: } while (FERR);
   653  00ED  1D18               	btfss	24,2	;volatile
   654  00EE  0008               	return
   655  00EF  28E1               	goto	l74
   656  00F0                     __end_of_clearFramingError:	
   657                           
   658                           	psect	text6
   659  0022                     __ptext6:	
   660 ;; *************** function _isr *****************
   661 ;; Defined at:
   662 ;;		line 56 in file "ServoController.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;		None
   665 ;; Auto vars:     Size  Location     Type
   666 ;;		None
   667 ;; Return value:  Size  Location     Type
   668 ;;                  1    wreg      void 
   669 ;; Registers used:
   670 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   671 ;; Tracked objects:
   672 ;;		On entry : 0/0
   673 ;;		On exit  : 0/0
   674 ;;		Unchanged: 0/0
   675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   676 ;;      Params:         0       0       0       0
   677 ;;      Locals:         0       0       0       0
   678 ;;      Temps:          5       0       0       0
   679 ;;      Totals:         5       0       0       0
   680 ;;Total ram usage:        5 bytes
   681 ;; Hardware stack levels used:    1
   682 ;; This function calls:
   683 ;;		Nothing
   684 ;; This function is called by:
   685 ;;		Interrupt level 1
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           
   690                           ;psect for function _isr
   691  0022                     _isr:	
   692                           
   693                           ;ServoController.c: 57: if (TMR2IF) {
   694  0022  1C8C               	btfss	12,1	;volatile
   695  0023  284C               	goto	i1l100
   696                           
   697                           ;ServoController.c: 58: ++sawtoothCounter;
   698  0024  3001               	movlw	1
   699  0025  00F5               	movwf	??_isr
   700  0026  0875               	movf	??_isr,w
   701  0027  07FA               	addwf	_sawtoothCounter,f	;volatile
   702                           
   703                           ;ServoController.c: 59: if (sawtoothCounter >= 180) {
   704  0028  30B4               	movlw	180
   705  0029  027A               	subwf	_sawtoothCounter,w	;volatile
   706  002A  1C03               	skipc
   707  002B  284B               	goto	i1l101
   708                           
   709                           ;ServoController.c: 60: if (sawtoothCounter >= 200) {
   710  002C  30C8               	movlw	200
   711  002D  027A               	subwf	_sawtoothCounter,w	;volatile
   712  002E  1C03               	skipc
   713  002F  2837               	goto	i1l642
   714                           
   715                           ;ServoController.c: 61: RA0 = 0;
   716  0030  1005               	bcf	5,0	;volatile
   717                           
   718                           ;ServoController.c: 62: RA1 = 0;
   719  0031  1085               	bcf	5,1	;volatile
   720                           
   721                           ;ServoController.c: 63: RA2 = 0;
   722  0032  1105               	bcf	5,2	;volatile
   723                           
   724                           ;ServoController.c: 64: RA3 = 0;
   725  0033  1185               	bcf	5,3	;volatile
   726                           
   727                           ;ServoController.c: 65: RA4 = 0;
   728  0034  1205               	bcf	5,4	;volatile
   729                           
   730                           ;ServoController.c: 67: sawtoothCounter = 0;
   731  0035  01FA               	clrf	_sawtoothCounter	;volatile
   732                           
   733                           ;ServoController.c: 68: } else {
   734  0036  284B               	goto	i1l101
   735  0037                     i1l642:	
   736                           
   737                           ;ServoController.c: 69: if (sawtoothCounter == eyebrowSawtoothThreshold) RA0 = 1;
   738  0037  087A               	movf	_sawtoothCounter,w	;volatile
   739  0038  0674               	xorwf	_eyebrowSawtoothThreshold,w	;volatile
   740  0039  1903               	btfsc	3,2
   741  003A  1405               	bsf	5,0	;volatile
   742                           
   743                           ;ServoController.c: 70: if (sawtoothCounter == leftLipCornerSawtoothThreshold) RA1 = 1;
   744  003B  087A               	movf	_sawtoothCounter,w	;volatile
   745  003C  0673               	xorwf	_leftLipCornerSawtoothThreshold,w	;volatile
   746  003D  1903               	btfsc	3,2
   747  003E  1485               	bsf	5,1	;volatile
   748                           
   749                           ;ServoController.c: 71: if (sawtoothCounter == rightLipCornerSawtoothThreshold) RA2 = 1;
   750  003F  087A               	movf	_sawtoothCounter,w	;volatile
   751  0040  0672               	xorwf	_rightLipCornerSawtoothThreshold,w	;volatile
   752  0041  1903               	btfsc	3,2
   753  0042  1505               	bsf	5,2	;volatile
   754                           
   755                           ;ServoController.c: 72: if (sawtoothCounter == lowerJawSawtoothThreshold) RA3 = 1;
   756  0043  087A               	movf	_sawtoothCounter,w	;volatile
   757  0044  0671               	xorwf	_lowerJawSawtoothThreshold,w	;volatile
   758  0045  1903               	btfsc	3,2
   759  0046  1585               	bsf	5,3	;volatile
   760                           
   761                           ;ServoController.c: 73: if (sawtoothCounter == eyelidsSawtoothThreshold) RA4 = 1;
   762  0047  087A               	movf	_sawtoothCounter,w	;volatile
   763  0048  0670               	xorwf	_eyelidsSawtoothThreshold,w	;volatile
   764  0049  1903               	btfsc	3,2
   765  004A  1605               	bsf	5,4	;volatile
   766  004B                     i1l101:	
   767                           
   768                           ;ServoController.c: 75: }
   769                           ;ServoController.c: 76: }
   770                           ;ServoController.c: 77: TMR2IF = 0;
   771  004B  108C               	bcf	12,1	;volatile
   772  004C                     i1l100:	
   773                           
   774                           ;ServoController.c: 78: }
   775                           ;ServoController.c: 79: if (RCIF) {
   776  004C  1E8C               	btfss	12,5	;volatile
   777  004D  28A7               	goto	i1l124
   778                           
   779                           ;ServoController.c: 80: ++receiveCounter;
   780  004E  3001               	movlw	1
   781  004F  00F5               	movwf	??_isr
   782  0050  0875               	movf	??_isr,w
   783  0051  07FB               	addwf	_receiveCounter,f	;volatile
   784                           
   785                           ;ServoController.c: 81: switch(receiveCounter) {
   786  0052  289C               	goto	i1l690
   787  0053                     i1l664:	
   788                           ;ServoController.c: 82: case 1:
   789                           
   790  0053  289A               	goto	L1
   791  0054                     i1l666:	
   792                           ;ServoController.c: 85: case 2:
   793                           
   794                           ;ServoController.c: 84: break;
   795                           
   796                           ;ServoController.c: 83: RCREG = 0;
   797                           
   798                           
   799                           ;ServoController.c: 86: partMidiNote = RCREG;
   800  0054  081A               	movf	26,w	;volatile
   801  0055  00F5               	movwf	??_isr
   802  0056  0875               	movf	??_isr,w
   803  0057  00FC               	movwf	_partMidiNote	;volatile
   804                           
   805                           ;ServoController.c: 87: break;
   806  0058  28A7               	goto	i1l124
   807  0059                     i1l668:	
   808                           ;ServoController.c: 88: case 3:
   809                           
   810                           
   811                           ;ServoController.c: 89: receiveCounter = 0;
   812  0059  01FB               	clrf	_receiveCounter	;volatile
   813                           
   814                           ;ServoController.c: 90: switch(partMidiNote) {
   815  005A  2884               	goto	i1l684
   816  005B                     i1l670:	
   817                           ;ServoController.c: 91: case 0x3C: eyebrowSawtoothThreshold = (180 + (RCREG)); break;
   818                           
   819  005B  081A               	movf	26,w	;volatile
   820  005C  3EB4               	addlw	180
   821  005D  00F5               	movwf	??_isr
   822  005E  0875               	movf	??_isr,w
   823  005F  00F4               	movwf	_eyebrowSawtoothThreshold	;volatile
   824  0060  28A7               	goto	i1l124
   825  0061                     i1l672:	
   826                           ;ServoController.c: 92: case 0x3E: leftLipCornerSawtoothThreshold = (180 + (RCREG)); bre
      +                          ak;
   827                           
   828  0061  081A               	movf	26,w	;volatile
   829  0062  3EB4               	addlw	180
   830  0063  00F5               	movwf	??_isr
   831  0064  0875               	movf	??_isr,w
   832  0065  00F3               	movwf	_leftLipCornerSawtoothThreshold	;volatile
   833  0066  28A7               	goto	i1l124
   834  0067                     i1l674:	
   835                           ;ServoController.c: 93: case 0x40: rightLipCornerSawtoothThreshold = (180 + (RCREG)); br
      +                          eak;
   836                           
   837  0067  081A               	movf	26,w	;volatile
   838  0068  3EB4               	addlw	180
   839  0069  00F5               	movwf	??_isr
   840  006A  0875               	movf	??_isr,w
   841  006B  00F2               	movwf	_rightLipCornerSawtoothThreshold	;volatile
   842  006C  28A7               	goto	i1l124
   843  006D                     i1l676:	
   844                           ;ServoController.c: 94: case 0x43: lowerJawSawtoothThreshold = (180 + (RCREG)); break;
   845                           
   846  006D  081A               	movf	26,w	;volatile
   847  006E  3EB4               	addlw	180
   848  006F  00F5               	movwf	??_isr
   849  0070  0875               	movf	??_isr,w
   850  0071  00F1               	movwf	_lowerJawSawtoothThreshold	;volatile
   851  0072  28A7               	goto	i1l124
   852  0073                     i1l678:	
   853                           ;ServoController.c: 95: case 0x45: eyelidsSawtoothThreshold = (180 + (RCREG)); break;
   854                           
   855  0073  081A               	movf	26,w	;volatile
   856  0074  3EB4               	addlw	180
   857  0075  00F5               	movwf	??_isr
   858  0076  0875               	movf	??_isr,w
   859  0077  00F0               	movwf	_eyelidsSawtoothThreshold	;volatile
   860  0078  28A7               	goto	i1l124
   861  0079                     i1l680:	
   862                           ;ServoController.c: 97: case 0x4A: RB5 = (RCREG > 0) ? 1 : 0; break;
   863                           
   864  0079  081A               	movf	26,w	;volatile
   865  007A  1903               	btfsc	3,2
   866  007B  2880               	goto	u12_20
   867  007C  1283               	bcf	3,5	;RP0=0, select bank0
   868  007D  1303               	bcf	3,6	;RP1=0, select bank0
   869  007E  1686               	bsf	6,5	;volatile
   870  007F  28A7               	goto	i1l124
   871  0080                     u12_20:	
   872  0080  1283               	bcf	3,5	;RP0=0, select bank0
   873  0081  1303               	bcf	3,6	;RP1=0, select bank0
   874  0082  1286               	bcf	6,5	;volatile
   875                           
   876                           ;ServoController.c: 98: }
   877  0083  28A7               	goto	i1l124
   878  0084                     i1l684:	
   879  0084  087C               	movf	_partMidiNote,w	;volatile
   880                           
   881                           ; Switch size 1, requested type "space"
   882                           ; Number of cases is 6, Range of values is 60 to 74
   883                           ; switch strategies available:
   884                           ; Name         Instructions Cycles
   885                           ; simple_byte           19    10 (average)
   886                           ; direct_byte           24     9 (fixed)
   887                           ; jumptable            263     9 (fixed)
   888                           ;	Chosen strategy is simple_byte
   889  0085  3A3C               	xorlw	60	; case 60
   890  0086  1903               	skipnz
   891  0087  285B               	goto	i1l670
   892  0088  3A02               	xorlw	2	; case 62
   893  0089  1903               	skipnz
   894  008A  2861               	goto	i1l672
   895  008B  3A7E               	xorlw	126	; case 64
   896  008C  1903               	skipnz
   897  008D  2867               	goto	i1l674
   898  008E  3A03               	xorlw	3	; case 67
   899  008F  1903               	skipnz
   900  0090  286D               	goto	i1l676
   901  0091  3A06               	xorlw	6	; case 69
   902  0092  1903               	skipnz
   903  0093  2873               	goto	i1l678
   904  0094  3A0F               	xorlw	15	; case 74
   905  0095  1903               	skipnz
   906  0096  2879               	goto	i1l680
   907  0097  28A7               	goto	i1l124
   908                           
   909                           ;ServoController.c: 99: break;
   910  0098  28A7               	goto	i1l124
   911  0099                     i1l686:	
   912                           ;ServoController.c: 100: default:
   913                           
   914                           
   915                           ;ServoController.c: 101: receiveCounter = 0;
   916  0099  01FB               	clrf	_receiveCounter	;volatile
   917  009A                     L1:	
   918                           
   919                           ;ServoController.c: 102: RCREG = 0;
   920  009A  019A               	clrf	26	;volatile
   921                           
   922                           ;ServoController.c: 104: }
   923                           
   924                           ;ServoController.c: 103: break;
   925  009B  28A7               	goto	i1l124
   926  009C                     i1l690:	
   927  009C  087B               	movf	_receiveCounter,w	;volatile
   928                           
   929                           ; Switch size 1, requested type "space"
   930                           ; Number of cases is 3, Range of values is 1 to 3
   931                           ; switch strategies available:
   932                           ; Name         Instructions Cycles
   933                           ; simple_byte           10     6 (average)
   934                           ; direct_byte           12     9 (fixed)
   935                           ; jumptable            263     9 (fixed)
   936                           ;	Chosen strategy is simple_byte
   937  009D  3A01               	xorlw	1	; case 1
   938  009E  1903               	skipnz
   939  009F  2853               	goto	i1l664
   940  00A0  3A03               	xorlw	3	; case 2
   941  00A1  1903               	skipnz
   942  00A2  2854               	goto	i1l666
   943  00A3  3A01               	xorlw	1	; case 3
   944  00A4  1903               	skipnz
   945  00A5  2859               	goto	i1l668
   946  00A6  2899               	goto	i1l686
   947  00A7                     i1l124:	
   948  00A7  0879               	movf	??_isr+4,w
   949  00A8  00FF               	movwf	127
   950  00A9  0878               	movf	??_isr+3,w
   951  00AA  008A               	movwf	10
   952  00AB  0877               	movf	??_isr+2,w
   953  00AC  0084               	movwf	4
   954  00AD  0E76               	swapf	(??_isr+1)^(0+-128),w
   955  00AE  0083               	movwf	3
   956  00AF  0EFE               	swapf	126,f
   957  00B0  0E7E               	swapf	126,w
   958  00B1  0009               	retfie
   959  00B2                     __end_of_isr:	
   960  007E                     btemp	set	126	;btemp
   961  007E                     wtemp0	set	126
   962                           
   963                           	psect	intentry
   964  0004                     __pintentry:	
   965                           ;incstack = 0
   966                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0]
   967                           
   968  0004                     interrupt_function:	
   969  007E                     saved_w	set	btemp
   970  0004  00FE               	movwf	btemp
   971  0005  0E03               	swapf	3,w
   972  0006  00F6               	movwf	??_isr+1
   973  0007  0804               	movf	4,w
   974  0008  00F7               	movwf	??_isr+2
   975  0009  080A               	movf	10,w
   976  000A  00F8               	movwf	??_isr+3
   977  000B  1283               	bcf	3,5	;RP0=0, select bank0
   978  000C  1303               	bcf	3,6	;RP1=0, select bank0
   979  000D  087F               	movf	btemp+1,w
   980  000E  00F9               	movwf	??_isr+4
   981  000F  2822               	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      13
    BANK0            80      1       3
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_clearFramingError
    _main->_clearOverrunError

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                  _clearFramingError
                  _clearOverrunError
                         _initServos
                           _initTMR2
                          _initUSART
 ---------------------------------------------------------------------------------
 (1) _initUSART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTMR2                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServos                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clearOverrunError                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _clearFramingError                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearFramingError
   _clearOverrunError
   _initServos
   _initTMR2
   _initUSART

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1       3       3        3.8%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      10      10        0.0%
ABS                  0      0      10       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 03 12:21:16 2018

                     __CFG_CP$ON 0000                               l74 00E1                               l67 00D2  
                    __CFG_CPD$ON 0000       __size_of_clearFramingError 000F                              l790 00B7  
                            l794 00BC                              _GIE 005F                              _RA0 0028  
                            _RA1 0029                              _RA2 002A                              _RA3 002B  
                            _RA4 002C                              _RB5 0035                              _PR2 0092  
                            _isr 0022                              fsr0 0004                     __CFG_FOSC$HS 0000  
                   __CFG_LVP$OFF 0000                             ?_isr 0075                             _BRGH 04C2  
                           _CREN 00C4                             _FERR 00C2                             _PEIE 005E  
                           _RCIF 0065                             _OERR 00C1                             _SPEN 00C7  
                           _main 00B2                             btemp 007E                    __CFG_BOREN$ON 0000  
      _lowerJawSawtoothThreshold 0071                             start 0010                            ??_isr 0075  
                          ?_main 0075                    __CFG_WDTE$OFF 0000                            _T2CON 0012  
                          i1l100 004C                            i1l101 004B                            i1l124 00A7  
                          i1l642 0037                            i1l670 005B                            i1l680 0079  
                          i1l672 0061                            i1l664 0053                            i1l674 0067  
                          i1l666 0054                            i1l690 009C                            i1l676 006D  
                          i1l684 0084                            i1l668 0059                            i1l686 0099  
                          i1l678 0073                            _RCREG 001A                            u12_20 0080  
                          _SPBRG 0099                    __CFG_PWRTE$ON 0000                            pclath 000A  
                          status 0003                            wtemp0 007E         _eyebrowSawtoothThreshold 0074  
       _eyelidsSawtoothThreshold 0070                   __CFG_MCLRE$OFF 0000                  __initialization 0011  
                   __end_of_main 00C2                           ??_main 0023                           _TMR2IE 0461  
                         _TMR2IF 0061                           _TMR2ON 0092                           _TRISA0 0428  
                         _TRISA1 0429                           _TRISA2 042A                           _TRISB0 0430  
                         _TRISB1 0431                           _TRISA3 042B                           _TRISB3 0433  
               __end_of_initTMR2 00D2                     __pdataCOMMON 0070                           saved_w 007E  
          clearOverrunError@temp 0021          __end_of__initialization 0020                   __pcstackCOMMON 0075  
              _clearOverrunError 00D2               ?_clearOverrunError 0075              ??_clearOverrunError 0022  
                     __pbssBANK0 0020               __size_of_initUSART 000B                       __pmaintext 00B2  
                     __pintentry 0004        __end_of_clearOverrunError 00E1                        ?_initTMR2 0075  
                     _initServos 00FB                __end_of_initUSART 00FB                          __ptext1 00F0  
                        __ptext2 00C2                          __ptext3 00FB                          __ptext4 00D2  
                        __ptext5 00E1                          __ptext6 0022                     __size_of_isr 0090  
           end_of_initialization 0020                  _sawtoothCounter 007A                       ??_initTMR2 0022  
     __size_of_clearOverrunError 000F                      ?_initServos 0075                    __pidataCOMMON 0104  
            start_initialization 0011                      __end_of_isr 00B2            clearFramingError@temp 0020  
                    __pbssCOMMON 007A                        ___latbits 0000                    __pcstackBANK0 0022  
 _leftLipCornerSawtoothThreshold 0073              __size_of_initServos 0009                __size_of_initTMR2 0010  
                      _initUSART 00F0  _rightLipCornerSawtoothThreshold 0072                     _partMidiNote 007C  
              interrupt_function 0004                       ?_initUSART 0075                     ??_initServos 0022  
              _clearFramingError 00E1               ?_clearFramingError 0075                         _initTMR2 00C2  
             __end_of_initServos 0104              ??_clearFramingError 0022                    __size_of_main 0010  
                 _receiveCounter 007B        __end_of_clearFramingError 00F0                      ??_initUSART 0022  
                       intlevel1 0000  
