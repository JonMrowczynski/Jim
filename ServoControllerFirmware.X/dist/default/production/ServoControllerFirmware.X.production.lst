

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 03 12:35:11 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 1.45
    24                           ; Generated 16/11/2017 GMT
    25                           ; 
    26                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F628A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  008C                     	;# 
    85  008E                     	;# 
    86  0092                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009F                     	;# 
    94                           
    95                           	psect	idataCOMMON
    96  0111                     __pidataCOMMON:	
    97                           
    98                           ;initializer for _lowerJawSawtoothThreshold
    99  0111  34B7               	retlw	183
   100                           
   101                           ;initializer for _rightLipCornerSawtoothThreshold
   102  0112  34BB               	retlw	187
   103                           
   104                           ;initializer for _leftLipCornerSawtoothThreshold
   105  0113  34BA               	retlw	186
   106                           
   107                           ;initializer for _eyebrowSawtoothThreshold
   108  0114  34BA               	retlw	186
   109                           
   110                           	psect	idataBANK0
   111  0115                     __pidataBANK0:	
   112                           
   113                           ;initializer for _eyelidsSawtoothThreshold
   114  0115  34B9               	retlw	185
   115  001A                     _RCREG	set	26
   116  0012                     _T2CON	set	18
   117  005F                     _GIE	set	95
   118  005E                     _PEIE	set	94
   119  0035                     _RB5	set	53
   120  0065                     _RCIF	set	101
   121  0030                     _RB0	set	48
   122  002B                     _RA3	set	43
   123  002A                     _RA2	set	42
   124  0029                     _RA1	set	41
   125  0028                     _RA0	set	40
   126  00C2                     _FERR	set	194
   127  00C1                     _OERR	set	193
   128  00C7                     _SPEN	set	199
   129  00C4                     _CREN	set	196
   130  0092                     _TMR2ON	set	146
   131  0061                     _TMR2IF	set	97
   132  0099                     _SPBRG	set	153
   133  0092                     _PR2	set	146
   134  0433                     _TRISB3	set	1075
   135  0430                     _TRISB0	set	1072
   136  042B                     _TRISA3	set	1067
   137  042A                     _TRISA2	set	1066
   138  0429                     _TRISA1	set	1065
   139  0428                     _TRISA0	set	1064
   140  04C2                     _BRGH	set	1218
   141  0431                     _TRISB1	set	1073
   142  0461                     _TMR2IE	set	1121
   143                           
   144                           ; #config settings
   145  0000                     
   146                           	psect	cinit
   147  0011                     start_initialization:	
   148  0011                     __initialization:	
   149                           
   150                           ; Initialize objects allocated to BANK0
   151  0011  2115               	fcall	__pidataBANK0	;fetch initializer
   152  0012  00A2               	movwf	__pdataBANK0& (0+127)
   153                           
   154                           ; Initialize objects allocated to COMMON
   155  0013  2111               	fcall	__pidataCOMMON	;fetch initializer
   156  0014  00F9               	movwf	__pdataCOMMON& (0+127)
   157  0015  2112               	fcall	__pidataCOMMON+1	;fetch initializer
   158  0016  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   159  0017  2113               	fcall	__pidataCOMMON+2	;fetch initializer
   160  0018  00FB               	movwf	(__pdataCOMMON+2)& (0+127)
   161  0019  2114               	fcall	__pidataCOMMON+3	;fetch initializer
   162  001A  00FC               	movwf	(__pdataCOMMON+3)& (0+127)
   163                           
   164                           ; Clear objects allocated to BANK0
   165  001B  01A0               	clrf	__pbssBANK0& (0+127)
   166  001C  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   167                           
   168                           ; Clear objects allocated to COMMON
   169  001D  01F5               	clrf	__pbssCOMMON& (0+127)
   170  001E  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   171  001F  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   172  0020  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   173  0021                     end_of_initialization:	
   174                           ;End of C runtime variable initialization code
   175                           
   176  0021                     __end_of__initialization:	
   177  0021  0183               	clrf	3
   178  0022  28BF               	ljmp	_main	;jump to C main() function
   179                           
   180                           	psect	bssCOMMON
   181  0075                     __pbssCOMMON:	
   182  0075                     _sawtoothCounter:	
   183  0075                     	ds	1
   184  0076                     _receiveCounter:	
   185  0076                     	ds	1
   186  0077                     _velocity:	
   187  0077                     	ds	1
   188  0078                     _partMidiNote:	
   189  0078                     	ds	1
   190                           
   191                           	psect	dataCOMMON
   192  0079                     __pdataCOMMON:	
   193  0079                     _lowerJawSawtoothThreshold:	
   194  0079                     	ds	1
   195  007A                     _rightLipCornerSawtoothThreshold:	
   196  007A                     	ds	1
   197  007B                     _leftLipCornerSawtoothThreshold:	
   198  007B                     	ds	1
   199  007C                     _eyebrowSawtoothThreshold:	
   200  007C                     	ds	1
   201                           
   202                           	psect	bssBANK0
   203  0020                     __pbssBANK0:	
   204  0020                     clearFramingError@temp:	
   205  0020                     	ds	1
   206  0021                     clearOverrunError@temp:	
   207  0021                     	ds	1
   208                           
   209                           	psect	dataBANK0
   210  0022                     __pdataBANK0:	
   211  0022                     _eyelidsSawtoothThreshold:	
   212  0022                     	ds	1
   213                           
   214                           	psect	cstackCOMMON
   215  0070                     __pcstackCOMMON:	
   216  0070                     ?_initTMR2:	
   217  0070                     ?_initUSART:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_clearOverrunError:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_clearFramingError:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?_initServos:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_isr:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ??_isr:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ?_main:	
   236                           ; 1 bytes @ 0x0
   237                           
   238                           
   239                           ; 1 bytes @ 0x0
   240  0070                     	ds	5
   241                           
   242                           	psect	cstackBANK0
   243  0023                     __pcstackBANK0:	
   244  0023                     ??_initTMR2:	
   245  0023                     ??_initUSART:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0023                     ??_clearOverrunError:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0023                     ??_clearFramingError:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0023                     ??_initServos:	
   255                           ; 1 bytes @ 0x0
   256                           
   257                           
   258                           ; 1 bytes @ 0x0
   259  0023                     	ds	1
   260  0024                     ??_main:	
   261                           
   262                           	psect	maintext
   263  00BF                     __pmaintext:	
   264                           ; 1 bytes @ 0x1
   265 ;;
   266 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   267 ;;
   268 ;; *************** function _main *****************
   269 ;; Defined at:
   270 ;;		line 111 in file "ServoController.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;		None
   273 ;; Auto vars:     Size  Location     Type
   274 ;;		None
   275 ;; Return value:  Size  Location     Type
   276 ;;                  1    wreg      void 
   277 ;; Registers used:
   278 ;;		wreg, status,2, status,0, pclath, cstack
   279 ;; Tracked objects:
   280 ;;		On entry : B00/0
   281 ;;		On exit  : 0/0
   282 ;;		Unchanged: 0/0
   283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   284 ;;      Params:         0       0       0       0
   285 ;;      Locals:         0       0       0       0
   286 ;;      Temps:          0       0       0       0
   287 ;;      Totals:         0       0       0       0
   288 ;;Total ram usage:        0 bytes
   289 ;; Hardware stack levels required when called:    2
   290 ;; This function calls:
   291 ;;		_clearFramingError
   292 ;;		_clearOverrunError
   293 ;;		_initServos
   294 ;;		_initTMR2
   295 ;;		_initUSART
   296 ;; This function is called by:
   297 ;;		Startup code after reset
   298 ;; This function uses a non-reentrant model
   299 ;;
   300                           
   301                           
   302                           ;psect for function _main
   303  00BF                     _main:	
   304                           
   305                           ;ServoController.c: 115: initServos();
   306                           
   307                           ;incstack = 0
   308                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   309  00BF  2108               	fcall	_initServos
   310                           
   311                           ;ServoController.c: 116: initUSART();
   312  00C0  20FD               	fcall	_initUSART
   313                           
   314                           ;ServoController.c: 117: initTMR2();
   315  00C1  20CF               	fcall	_initTMR2
   316                           
   317                           ;ServoController.c: 119: PEIE = 1;
   318  00C2  170B               	bsf	11,6	;volatile
   319                           
   320                           ;ServoController.c: 120: GIE = 1;
   321  00C3  178B               	bsf	11,7	;volatile
   322  00C4                     l867:	
   323                           ;ServoController.c: 126: while(1) {
   324                           
   325                           
   326                           ;ServoController.c: 127: if (OERR)
   327  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   328  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   329  00C6  1C98               	btfss	24,1	;volatile
   330  00C7  28C9               	goto	l871
   331                           
   332                           ;ServoController.c: 128: clearOverrunError();
   333  00C8  20DF               	fcall	_clearOverrunError
   334  00C9                     l871:	
   335                           
   336                           ;ServoController.c: 129: if(FERR)
   337  00C9  1283               	bcf	3,5	;RP0=0, select bank0
   338  00CA  1303               	bcf	3,6	;RP1=0, select bank0
   339  00CB  1D18               	btfss	24,2	;volatile
   340  00CC  28C4               	goto	l867
   341                           
   342                           ;ServoController.c: 130: clearFramingError();
   343  00CD  20EE               	fcall	_clearFramingError
   344  00CE  28C4               	goto	l867
   345  00CF                     __end_of_main:	
   346                           
   347                           	psect	text1
   348  00FD                     __ptext1:	
   349 ;; *************** function _initUSART *****************
   350 ;; Defined at:
   351 ;;		line 52 in file "usart.h"
   352 ;; Parameters:    Size  Location     Type
   353 ;;		None
   354 ;; Auto vars:     Size  Location     Type
   355 ;;		None
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   365 ;;      Params:         0       0       0       0
   366 ;;      Locals:         0       0       0       0
   367 ;;      Temps:          0       0       0       0
   368 ;;      Totals:         0       0       0       0
   369 ;;Total ram usage:        0 bytes
   370 ;; Hardware stack levels used:    1
   371 ;; Hardware stack levels required when called:    1
   372 ;; This function calls:
   373 ;;		Nothing
   374 ;; This function is called by:
   375 ;;		_main
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379                           
   380                           ;psect for function _initUSART
   381  00FD                     _initUSART:	
   382                           
   383                           ;usart.h: 53: TRISB1 = 1;
   384                           
   385                           ;incstack = 0
   386                           ; Regs used in _initUSART: [wreg]
   387  00FD  1683               	bsf	3,5	;RP0=1, select bank1
   388  00FE  1303               	bcf	3,6	;RP1=0, select bank1
   389  00FF  1486               	bsf	6,1	;volatile
   390                           
   391                           ;usart.h: 54: SPBRG = 39;
   392  0100  3027               	movlw	39
   393  0101  0099               	movwf	25	;volatile
   394                           
   395                           ;usart.h: 55: BRGH = 1;
   396  0102  1518               	bsf	24,2	;volatile
   397                           
   398                           ;usart.h: 56: CREN = 1;
   399  0103  1283               	bcf	3,5	;RP0=0, select bank0
   400  0104  1303               	bcf	3,6	;RP1=0, select bank0
   401  0105  1618               	bsf	24,4	;volatile
   402                           
   403                           ;usart.h: 57: SPEN = 1;
   404  0106  1798               	bsf	24,7	;volatile
   405  0107  0008               	return
   406  0108                     __end_of_initUSART:	
   407                           
   408                           	psect	text2
   409  00CF                     __ptext2:	
   410 ;; *************** function _initTMR2 *****************
   411 ;; Defined at:
   412 ;;		line 44 in file "tmr2.h"
   413 ;; Parameters:    Size  Location     Type
   414 ;;		None
   415 ;; Auto vars:     Size  Location     Type
   416 ;;		None
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   426 ;;      Params:         0       0       0       0
   427 ;;      Locals:         0       0       0       0
   428 ;;      Temps:          0       0       0       0
   429 ;;      Totals:         0       0       0       0
   430 ;;Total ram usage:        0 bytes
   431 ;; Hardware stack levels used:    1
   432 ;; Hardware stack levels required when called:    1
   433 ;; This function calls:
   434 ;;		Nothing
   435 ;; This function is called by:
   436 ;;		_main
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           
   441                           ;psect for function _initTMR2
   442  00CF                     _initTMR2:	
   443                           
   444                           ;tmr2.h: 45: PR2 = 124;
   445                           
   446                           ;incstack = 0
   447                           ; Regs used in _initTMR2: [wreg]
   448  00CF  307C               	movlw	124
   449  00D0  1683               	bsf	3,5	;RP0=1, select bank1
   450  00D1  1303               	bcf	3,6	;RP1=0, select bank1
   451  00D2  0092               	movwf	18	;volatile
   452                           
   453                           ;tmr2.h: 46: T2CON = 0b00000001;
   454  00D3  3001               	movlw	1
   455  00D4  1283               	bcf	3,5	;RP0=0, select bank0
   456  00D5  1303               	bcf	3,6	;RP1=0, select bank0
   457  00D6  0092               	movwf	18	;volatile
   458                           
   459                           ;tmr2.h: 47: TMR2IF = 0;
   460  00D7  108C               	bcf	12,1	;volatile
   461                           
   462                           ;tmr2.h: 48: TMR2IE = 1;
   463  00D8  1683               	bsf	3,5	;RP0=1, select bank1
   464  00D9  1303               	bcf	3,6	;RP1=0, select bank1
   465  00DA  148C               	bsf	12,1	;volatile
   466                           
   467                           ;tmr2.h: 49: TMR2ON = 1;
   468  00DB  1283               	bcf	3,5	;RP0=0, select bank0
   469  00DC  1303               	bcf	3,6	;RP1=0, select bank0
   470  00DD  1512               	bsf	18,2	;volatile
   471  00DE  0008               	return
   472  00DF                     __end_of_initTMR2:	
   473                           
   474                           	psect	text3
   475  0108                     __ptext3:	
   476 ;; *************** function _initServos *****************
   477 ;; Defined at:
   478 ;;		line 98 in file "ServoController.h"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		None
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   492 ;;      Params:         0       0       0       0
   493 ;;      Locals:         0       0       0       0
   494 ;;      Temps:          0       0       0       0
   495 ;;      Totals:         0       0       0       0
   496 ;;Total ram usage:        0 bytes
   497 ;; Hardware stack levels used:    1
   498 ;; Hardware stack levels required when called:    1
   499 ;; This function calls:
   500 ;;		Nothing
   501 ;; This function is called by:
   502 ;;		_main
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           
   507                           ;psect for function _initServos
   508  0108                     _initServos:	
   509                           
   510                           ;ServoController.h: 99: TRISA0 = 0;
   511                           
   512                           ;incstack = 0
   513                           ; Regs used in _initServos: []
   514  0108  1683               	bsf	3,5	;RP0=1, select bank1
   515  0109  1303               	bcf	3,6	;RP1=0, select bank1
   516  010A  1005               	bcf	5,0	;volatile
   517                           
   518                           ;ServoController.h: 100: TRISA1 = 0;
   519  010B  1085               	bcf	5,1	;volatile
   520                           
   521                           ;ServoController.h: 101: TRISA2 = 0;
   522  010C  1105               	bcf	5,2	;volatile
   523                           
   524                           ;ServoController.h: 102: TRISA3 = 0;
   525  010D  1185               	bcf	5,3	;volatile
   526                           
   527                           ;ServoController.h: 103: TRISB0 = 0;
   528  010E  1006               	bcf	6,0	;volatile
   529                           
   530                           ;ServoController.h: 104: TRISB3 = 0;
   531  010F  1186               	bcf	6,3	;volatile
   532  0110  0008               	return
   533  0111                     __end_of_initServos:	
   534                           
   535                           	psect	text4
   536  00DF                     __ptext4:	
   537 ;; *************** function _clearOverrunError *****************
   538 ;; Defined at:
   539 ;;		line 65 in file "usart.h"
   540 ;; Parameters:    Size  Location     Type
   541 ;;		None
   542 ;; Auto vars:     Size  Location     Type
   543 ;;		None
   544 ;; Return value:  Size  Location     Type
   545 ;;                  1    wreg      void 
   546 ;; Registers used:
   547 ;;		wreg
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   553 ;;      Params:         0       0       0       0
   554 ;;      Locals:         0       0       0       0
   555 ;;      Temps:          0       1       0       0
   556 ;;      Totals:         0       1       0       0
   557 ;;Total ram usage:        1 bytes
   558 ;; Hardware stack levels used:    1
   559 ;; Hardware stack levels required when called:    1
   560 ;; This function calls:
   561 ;;		Nothing
   562 ;; This function is called by:
   563 ;;		_main
   564 ;; This function uses a non-reentrant model
   565 ;;
   566                           
   567                           
   568                           ;psect for function _clearOverrunError
   569  00DF                     _clearOverrunError:	
   570  00DF                     l67:	
   571                           ;incstack = 0
   572                           ; Regs used in _clearOverrunError: [wreg]
   573                           ;usart.h: 66: static unsigned char temp = 0;
   574                           ;usart.h: 67: do {
   575                           
   576                           
   577                           ;usart.h: 68: temp = RCREG;
   578  00DF  1283               	bcf	3,5	;RP0=0, select bank0
   579  00E0  1303               	bcf	3,6	;RP1=0, select bank0
   580  00E1  081A               	movf	26,w	;volatile
   581  00E2  00A3               	movwf	??_clearOverrunError
   582  00E3  0823               	movf	??_clearOverrunError,w
   583  00E4  00A1               	movwf	clearOverrunError@temp
   584                           
   585                           ;usart.h: 69: temp = RCREG;
   586  00E5  081A               	movf	26,w	;volatile
   587  00E6  00A3               	movwf	??_clearOverrunError
   588  00E7  0823               	movf	??_clearOverrunError,w
   589  00E8  00A1               	movwf	clearOverrunError@temp
   590                           
   591                           ;usart.h: 70: CREN = 0;
   592  00E9  1218               	bcf	24,4	;volatile
   593                           
   594                           ;usart.h: 71: CREN = 1;
   595  00EA  1618               	bsf	24,4	;volatile
   596                           
   597                           ;usart.h: 72: } while(OERR);
   598  00EB  1C98               	btfss	24,1	;volatile
   599  00EC  0008               	return
   600  00ED  28DF               	goto	l67
   601  00EE                     __end_of_clearOverrunError:	
   602                           
   603                           	psect	text5
   604  00EE                     __ptext5:	
   605 ;; *************** function _clearFramingError *****************
   606 ;; Defined at:
   607 ;;		line 83 in file "usart.h"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   621 ;;      Params:         0       0       0       0
   622 ;;      Locals:         0       0       0       0
   623 ;;      Temps:          0       1       0       0
   624 ;;      Totals:         0       1       0       0
   625 ;;Total ram usage:        1 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:    1
   628 ;; This function calls:
   629 ;;		Nothing
   630 ;; This function is called by:
   631 ;;		_main
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           
   636                           ;psect for function _clearFramingError
   637  00EE                     _clearFramingError:	
   638  00EE                     l74:	
   639                           ;incstack = 0
   640                           ; Regs used in _clearFramingError: [wreg]
   641                           ;usart.h: 84: static unsigned char temp = 0;
   642                           ;usart.h: 85: do {
   643                           
   644                           
   645                           ;usart.h: 86: temp = RCREG;
   646  00EE  1283               	bcf	3,5	;RP0=0, select bank0
   647  00EF  1303               	bcf	3,6	;RP1=0, select bank0
   648  00F0  081A               	movf	26,w	;volatile
   649  00F1  00A3               	movwf	??_clearFramingError
   650  00F2  0823               	movf	??_clearFramingError,w
   651  00F3  00A0               	movwf	clearFramingError@temp
   652                           
   653                           ;usart.h: 87: temp = RCREG;
   654  00F4  081A               	movf	26,w	;volatile
   655  00F5  00A3               	movwf	??_clearFramingError
   656  00F6  0823               	movf	??_clearFramingError,w
   657  00F7  00A0               	movwf	clearFramingError@temp
   658                           
   659                           ;usart.h: 88: SPEN = 0;
   660  00F8  1398               	bcf	24,7	;volatile
   661                           
   662                           ;usart.h: 89: SPEN = 1;
   663  00F9  1798               	bsf	24,7	;volatile
   664                           
   665                           ;usart.h: 90: } while (FERR);
   666  00FA  1D18               	btfss	24,2	;volatile
   667  00FB  0008               	return
   668  00FC  28EE               	goto	l74
   669  00FD                     __end_of_clearFramingError:	
   670                           
   671                           	psect	text6
   672  0023                     __ptext6:	
   673 ;; *************** function _isr *****************
   674 ;; Defined at:
   675 ;;		line 57 in file "ServoController.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;		None
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   689 ;;      Params:         0       0       0       0
   690 ;;      Locals:         0       0       0       0
   691 ;;      Temps:          5       0       0       0
   692 ;;      Totals:         5       0       0       0
   693 ;;Total ram usage:        5 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		Interrupt level 1
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           
   703                           ;psect for function _isr
   704  0023                     _isr:	
   705                           
   706                           ;ServoController.c: 58: if (TMR2IF) {
   707  0023  1C8C               	btfss	12,1	;volatile
   708  0024  284D               	goto	i1l102
   709                           
   710                           ;ServoController.c: 59: ++sawtoothCounter;
   711  0025  3001               	movlw	1
   712  0026  00F0               	movwf	??_isr
   713  0027  0870               	movf	??_isr,w
   714  0028  07F5               	addwf	_sawtoothCounter,f	;volatile
   715                           
   716                           ;ServoController.c: 60: if (sawtoothCounter >= 180) {
   717  0029  30B4               	movlw	180
   718  002A  0275               	subwf	_sawtoothCounter,w	;volatile
   719  002B  1C03               	skipc
   720  002C  284C               	goto	i1l103
   721                           
   722                           ;ServoController.c: 61: if (sawtoothCounter >= 200) {
   723  002D  30C8               	movlw	200
   724  002E  0275               	subwf	_sawtoothCounter,w	;volatile
   725  002F  1C03               	skipc
   726  0030  2838               	goto	i1l747
   727                           
   728                           ;ServoController.c: 62: RA0 = 0;
   729  0031  1005               	bcf	5,0	;volatile
   730                           
   731                           ;ServoController.c: 63: RA1 = 0;
   732  0032  1085               	bcf	5,1	;volatile
   733                           
   734                           ;ServoController.c: 64: RA2 = 0;
   735  0033  1105               	bcf	5,2	;volatile
   736                           
   737                           ;ServoController.c: 65: RA3 = 0;
   738  0034  1185               	bcf	5,3	;volatile
   739                           
   740                           ;ServoController.c: 66: RB0 = 0;
   741  0035  1006               	bcf	6,0	;volatile
   742                           
   743                           ;ServoController.c: 68: sawtoothCounter = 0;
   744  0036  01F5               	clrf	_sawtoothCounter	;volatile
   745                           
   746                           ;ServoController.c: 69: } else {
   747  0037  284C               	goto	i1l103
   748  0038                     i1l747:	
   749                           
   750                           ;ServoController.c: 70: if (sawtoothCounter == eyebrowSawtoothThreshold) RA0 = 1;
   751  0038  0875               	movf	_sawtoothCounter,w	;volatile
   752  0039  067C               	xorwf	_eyebrowSawtoothThreshold,w	;volatile
   753  003A  1903               	btfsc	3,2
   754  003B  1405               	bsf	5,0	;volatile
   755                           
   756                           ;ServoController.c: 71: if (sawtoothCounter == leftLipCornerSawtoothThreshold) RA1 = 1;
   757  003C  0875               	movf	_sawtoothCounter,w	;volatile
   758  003D  067B               	xorwf	_leftLipCornerSawtoothThreshold,w	;volatile
   759  003E  1903               	btfsc	3,2
   760  003F  1485               	bsf	5,1	;volatile
   761                           
   762                           ;ServoController.c: 72: if (sawtoothCounter == rightLipCornerSawtoothThreshold) RA2 = 1;
   763  0040  0875               	movf	_sawtoothCounter,w	;volatile
   764  0041  067A               	xorwf	_rightLipCornerSawtoothThreshold,w	;volatile
   765  0042  1903               	btfsc	3,2
   766  0043  1505               	bsf	5,2	;volatile
   767                           
   768                           ;ServoController.c: 73: if (sawtoothCounter == lowerJawSawtoothThreshold) RA3 = 1;
   769  0044  0875               	movf	_sawtoothCounter,w	;volatile
   770  0045  0679               	xorwf	_lowerJawSawtoothThreshold,w	;volatile
   771  0046  1903               	btfsc	3,2
   772  0047  1585               	bsf	5,3	;volatile
   773                           
   774                           ;ServoController.c: 74: if (sawtoothCounter == eyelidsSawtoothThreshold) RB0 = 1;
   775  0048  0875               	movf	_sawtoothCounter,w	;volatile
   776  0049  0622               	xorwf	_eyelidsSawtoothThreshold,w	;volatile
   777  004A  1903               	btfsc	3,2
   778  004B  1406               	bsf	6,0	;volatile
   779  004C                     i1l103:	
   780                           
   781                           ;ServoController.c: 76: }
   782                           ;ServoController.c: 77: }
   783                           ;ServoController.c: 78: TMR2IF = 0;
   784  004C  108C               	bcf	12,1	;volatile
   785  004D                     i1l102:	
   786                           
   787                           ;ServoController.c: 79: }
   788                           ;ServoController.c: 80: if (RCIF) {
   789  004D  1E8C               	btfss	12,5	;volatile
   790  004E  28B4               	goto	i1l127
   791                           
   792                           ;ServoController.c: 81: ++receiveCounter;
   793  004F  3001               	movlw	1
   794  0050  00F0               	movwf	??_isr
   795  0051  0870               	movf	??_isr,w
   796  0052  07F6               	addwf	_receiveCounter,f	;volatile
   797                           
   798                           ;ServoController.c: 82: switch(receiveCounter) {
   799  0053  28A9               	goto	i1l801
   800  0054                     i1l769:	
   801                           ;ServoController.c: 83: case 1:
   802                           
   803  0054  28A7               	goto	L1
   804  0055                     i1l771:	
   805                           ;ServoController.c: 86: case 2:
   806                           
   807                           ;ServoController.c: 85: break;
   808                           
   809                           ;ServoController.c: 84: RCREG = 0;
   810                           
   811                           
   812                           ;ServoController.c: 87: partMidiNote = RCREG;
   813  0055  081A               	movf	26,w	;volatile
   814  0056  00F0               	movwf	??_isr
   815  0057  0870               	movf	??_isr,w
   816  0058  00F8               	movwf	_partMidiNote	;volatile
   817                           
   818                           ;ServoController.c: 88: break;
   819  0059  28B4               	goto	i1l127
   820  005A                     i1l773:	
   821                           ;ServoController.c: 89: case 3:
   822                           
   823                           
   824                           ;ServoController.c: 90: receiveCounter = 0;
   825  005A  01F6               	clrf	_receiveCounter	;volatile
   826                           
   827                           ;ServoController.c: 91: velocity = RCREG;
   828  005B  081A               	movf	26,w	;volatile
   829  005C  00F0               	movwf	??_isr
   830  005D  0870               	movf	??_isr,w
   831  005E  00F7               	movwf	_velocity	;volatile
   832                           
   833                           ;ServoController.c: 92: if (velocity > 10) velocity = 10;
   834  005F  300B               	movlw	11
   835  0060  0277               	subwf	_velocity,w	;volatile
   836  0061  1C03               	skipc
   837  0062  2891               	goto	i1l795
   838  0063  300A               	movlw	10
   839  0064  00F0               	movwf	??_isr
   840  0065  0870               	movf	??_isr,w
   841  0066  00F7               	movwf	_velocity	;volatile
   842                           
   843                           ;ServoController.c: 93: switch(partMidiNote) {
   844  0067  2891               	goto	i1l795
   845  0068                     i1l781:	
   846                           ;ServoController.c: 94: case 0x3C: eyebrowSawtoothThreshold = (180 + (velocity)); break;
   847                           
   848  0068  0877               	movf	_velocity,w	;volatile
   849  0069  3EB4               	addlw	180
   850  006A  00F0               	movwf	??_isr
   851  006B  0870               	movf	??_isr,w
   852  006C  00FC               	movwf	_eyebrowSawtoothThreshold	;volatile
   853  006D  28B4               	goto	i1l127
   854  006E                     i1l783:	
   855                           ;ServoController.c: 95: case 0x3E: leftLipCornerSawtoothThreshold = (180 + (velocity)); 
      +                          break;
   856                           
   857  006E  0877               	movf	_velocity,w	;volatile
   858  006F  3EB4               	addlw	180
   859  0070  00F0               	movwf	??_isr
   860  0071  0870               	movf	??_isr,w
   861  0072  00FB               	movwf	_leftLipCornerSawtoothThreshold	;volatile
   862  0073  28B4               	goto	i1l127
   863  0074                     i1l785:	
   864                           ;ServoController.c: 96: case 0x40: rightLipCornerSawtoothThreshold = (180 + (velocity));
      +                           break;
   865                           
   866  0074  0877               	movf	_velocity,w	;volatile
   867  0075  3EB4               	addlw	180
   868  0076  00F0               	movwf	??_isr
   869  0077  0870               	movf	??_isr,w
   870  0078  00FA               	movwf	_rightLipCornerSawtoothThreshold	;volatile
   871  0079  28B4               	goto	i1l127
   872  007A                     i1l787:	
   873                           ;ServoController.c: 97: case 0x43: lowerJawSawtoothThreshold = (180 + (velocity)); break
      +                          ;
   874                           
   875  007A  0877               	movf	_velocity,w	;volatile
   876  007B  3EB4               	addlw	180
   877  007C  00F0               	movwf	??_isr
   878  007D  0870               	movf	??_isr,w
   879  007E  00F9               	movwf	_lowerJawSawtoothThreshold	;volatile
   880  007F  28B4               	goto	i1l127
   881  0080                     i1l789:	
   882                           ;ServoController.c: 98: case 0x45: eyelidsSawtoothThreshold = (180 + (velocity)); break;
   883                           
   884  0080  0877               	movf	_velocity,w	;volatile
   885  0081  3EB4               	addlw	180
   886  0082  00F0               	movwf	??_isr
   887  0083  0870               	movf	??_isr,w
   888  0084  00A2               	movwf	_eyelidsSawtoothThreshold	;volatile
   889  0085  28B4               	goto	i1l127
   890  0086                     i1l791:	
   891                           ;ServoController.c: 100: case 0x4A: RB5 = (velocity > 0) ? 1 : 0; break;
   892                           
   893  0086  0877               	movf	_velocity,w	;volatile
   894  0087  1903               	btfsc	3,2
   895  0088  288D               	goto	u29_20
   896  0089  1283               	bcf	3,5	;RP0=0, select bank0
   897  008A  1303               	bcf	3,6	;RP1=0, select bank0
   898  008B  1686               	bsf	6,5	;volatile
   899  008C  28B4               	goto	i1l127
   900  008D                     u29_20:	
   901  008D  1283               	bcf	3,5	;RP0=0, select bank0
   902  008E  1303               	bcf	3,6	;RP1=0, select bank0
   903  008F  1286               	bcf	6,5	;volatile
   904                           
   905                           ;ServoController.c: 101: }
   906  0090  28B4               	goto	i1l127
   907  0091                     i1l795:	
   908  0091  0878               	movf	_partMidiNote,w	;volatile
   909                           
   910                           ; Switch size 1, requested type "space"
   911                           ; Number of cases is 6, Range of values is 60 to 74
   912                           ; switch strategies available:
   913                           ; Name         Instructions Cycles
   914                           ; simple_byte           19    10 (average)
   915                           ; direct_byte           24     9 (fixed)
   916                           ; jumptable            263     9 (fixed)
   917                           ;	Chosen strategy is simple_byte
   918  0092  3A3C               	xorlw	60	; case 60
   919  0093  1903               	skipnz
   920  0094  2868               	goto	i1l781
   921  0095  3A02               	xorlw	2	; case 62
   922  0096  1903               	skipnz
   923  0097  286E               	goto	i1l783
   924  0098  3A7E               	xorlw	126	; case 64
   925  0099  1903               	skipnz
   926  009A  2874               	goto	i1l785
   927  009B  3A03               	xorlw	3	; case 67
   928  009C  1903               	skipnz
   929  009D  287A               	goto	i1l787
   930  009E  3A06               	xorlw	6	; case 69
   931  009F  1903               	skipnz
   932  00A0  2880               	goto	i1l789
   933  00A1  3A0F               	xorlw	15	; case 74
   934  00A2  1903               	skipnz
   935  00A3  2886               	goto	i1l791
   936  00A4  28B4               	goto	i1l127
   937                           
   938                           ;ServoController.c: 102: break;
   939  00A5  28B4               	goto	i1l127
   940  00A6                     i1l797:	
   941                           ;ServoController.c: 103: default:
   942                           
   943                           
   944                           ;ServoController.c: 104: receiveCounter = 0;
   945  00A6  01F6               	clrf	_receiveCounter	;volatile
   946  00A7                     L1:	
   947                           
   948                           ;ServoController.c: 105: RCREG = 0;
   949  00A7  019A               	clrf	26	;volatile
   950                           
   951                           ;ServoController.c: 107: }
   952                           
   953                           ;ServoController.c: 106: break;
   954  00A8  28B4               	goto	i1l127
   955  00A9                     i1l801:	
   956  00A9  0876               	movf	_receiveCounter,w	;volatile
   957                           
   958                           ; Switch size 1, requested type "space"
   959                           ; Number of cases is 3, Range of values is 1 to 3
   960                           ; switch strategies available:
   961                           ; Name         Instructions Cycles
   962                           ; simple_byte           10     6 (average)
   963                           ; direct_byte           12     9 (fixed)
   964                           ; jumptable            263     9 (fixed)
   965                           ;	Chosen strategy is simple_byte
   966  00AA  3A01               	xorlw	1	; case 1
   967  00AB  1903               	skipnz
   968  00AC  2854               	goto	i1l769
   969  00AD  3A03               	xorlw	3	; case 2
   970  00AE  1903               	skipnz
   971  00AF  2855               	goto	i1l771
   972  00B0  3A01               	xorlw	1	; case 3
   973  00B1  1903               	skipnz
   974  00B2  285A               	goto	i1l773
   975  00B3  28A6               	goto	i1l797
   976  00B4                     i1l127:	
   977  00B4  0874               	movf	??_isr+4,w
   978  00B5  00FF               	movwf	127
   979  00B6  0873               	movf	??_isr+3,w
   980  00B7  008A               	movwf	10
   981  00B8  0872               	movf	??_isr+2,w
   982  00B9  0084               	movwf	4
   983  00BA  0E71               	swapf	(??_isr+1)^(0+-128),w
   984  00BB  0083               	movwf	3
   985  00BC  0EFE               	swapf	126,f
   986  00BD  0E7E               	swapf	126,w
   987  00BE  0009               	retfie
   988  00BF                     __end_of_isr:	
   989  007E                     btemp	set	126	;btemp
   990  007E                     wtemp0	set	126
   991                           
   992                           	psect	intentry
   993  0004                     __pintentry:	
   994                           ;incstack = 0
   995                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0]
   996                           
   997  0004                     interrupt_function:	
   998  007E                     saved_w	set	btemp
   999  0004  00FE               	movwf	btemp
  1000  0005  0E03               	swapf	3,w
  1001  0006  00F1               	movwf	??_isr+1
  1002  0007  0804               	movf	4,w
  1003  0008  00F2               	movwf	??_isr+2
  1004  0009  080A               	movf	10,w
  1005  000A  00F3               	movwf	??_isr+3
  1006  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1007  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1008  000D  087F               	movf	btemp+1,w
  1009  000E  00F4               	movwf	??_isr+4
  1010  000F  2823               	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      13
    BANK0            80      1       4
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_clearFramingError
    _main->_clearOverrunError

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                  _clearFramingError
                  _clearOverrunError
                         _initServos
                           _initTMR2
                          _initUSART
 ---------------------------------------------------------------------------------
 (1) _initUSART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTMR2                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServos                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clearOverrunError                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _clearFramingError                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearFramingError
   _clearOverrunError
   _initServos
   _initTMR2
   _initUSART

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1       4       3        5.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      11      10        0.0%
ABS                  0      0      11       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 03 12:35:11 2018

                     __CFG_CP$ON 0000                               l74 00EE                               l67 00DF  
                    __CFG_CPD$ON 0000       __size_of_clearFramingError 000F                              l871 00C9  
                            l867 00C4                              _GIE 005F                              _RA0 0028  
                            _RA1 0029                              _RA2 002A                              _RB0 0030  
                            _RA3 002B                              _RB5 0035                              _PR2 0092  
                            _isr 0023                              fsr0 0004                     __CFG_FOSC$HS 0000  
                   __CFG_LVP$OFF 0000                             ?_isr 0070                             _BRGH 04C2  
                           _CREN 00C4                             _FERR 00C2                             _PEIE 005E  
                           _RCIF 0065                             _OERR 00C1                             _SPEN 00C7  
                           _main 00BF                             btemp 007E                    __CFG_BOREN$ON 0000  
      _lowerJawSawtoothThreshold 0079                             start 0010                            ??_isr 0070  
                          ?_main 0070                    __CFG_WDTE$OFF 0000                            _T2CON 0012  
                          i1l102 004D                            i1l103 004C                            i1l127 00B4  
                          i1l801 00A9                            i1l771 0055                            i1l747 0038  
                          i1l781 0068                            i1l773 005A                            i1l791 0086  
                          i1l783 006E                            i1l785 0074                            i1l769 0054  
                          i1l787 007A                            i1l795 0091                            i1l797 00A6  
                          i1l789 0080                            _RCREG 001A                            _SPBRG 0099  
                          u29_20 008D                    __CFG_PWRTE$ON 0000                            pclath 000A  
                          status 0003                            wtemp0 007E         _eyebrowSawtoothThreshold 007C  
       _eyelidsSawtoothThreshold 0022                   __CFG_MCLRE$OFF 0000                  __initialization 0011  
                   __end_of_main 00CF                           ??_main 0024                           _TMR2IE 0461  
                         _TMR2IF 0061                           _TMR2ON 0092                           _TRISA0 0428  
                         _TRISA1 0429                           _TRISA2 042A                           _TRISB0 0430  
                         _TRISB1 0431                           _TRISA3 042B                           _TRISB3 0433  
               __end_of_initTMR2 00DF                     __pdataCOMMON 0079                           saved_w 007E  
          clearOverrunError@temp 0021          __end_of__initialization 0021                   __pcstackCOMMON 0070  
                   __pidataBANK0 0115                _clearOverrunError 00DF               ?_clearOverrunError 0070  
            ??_clearOverrunError 0023                       __pbssBANK0 0020               __size_of_initUSART 000B  
                     __pmaintext 00BF                       __pintentry 0004        __end_of_clearOverrunError 00EE  
                      ?_initTMR2 0070                       _initServos 0108                __end_of_initUSART 0108  
                        __ptext1 00FD                          __ptext2 00CF                          __ptext3 0108  
                        __ptext4 00DF                          __ptext5 00EE                          __ptext6 0023  
                   __size_of_isr 009C             end_of_initialization 0021                  _sawtoothCounter 0075  
                     ??_initTMR2 0023       __size_of_clearOverrunError 000F                      ?_initServos 0070  
                  __pidataCOMMON 0111              start_initialization 0011                      __end_of_isr 00BF  
          clearFramingError@temp 0020                      __pdataBANK0 0022                      __pbssCOMMON 0075  
                      ___latbits 0000                    __pcstackBANK0 0023   _leftLipCornerSawtoothThreshold 007B  
            __size_of_initServos 0009                __size_of_initTMR2 0010                        _initUSART 00FD  
_rightLipCornerSawtoothThreshold 007A                     _partMidiNote 0078                interrupt_function 0004  
                     ?_initUSART 0070                     ??_initServos 0023                _clearFramingError 00EE  
             ?_clearFramingError 0070                         _initTMR2 00CF               __end_of_initServos 0111  
            ??_clearFramingError 0023                    __size_of_main 0010                   _receiveCounter 0076  
                       _velocity 0077        __end_of_clearFramingError 00FD                      ??_initUSART 0023  
                       intlevel1 0000  
