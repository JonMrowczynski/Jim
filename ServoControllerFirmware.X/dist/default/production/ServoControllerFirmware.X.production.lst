

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Aug 10 22:49:01 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.00
    24                           ; Generated 27/05/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F628A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  008C                     	;# 
    85  008E                     	;# 
    86  0092                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009F                     	;# 
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0015                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001F                     	;# 
   118  0081                     	;# 
   119  0085                     	;# 
   120  0086                     	;# 
   121  008C                     	;# 
   122  008E                     	;# 
   123  0092                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009F                     	;# 
   131                           
   132                           	psect	idataCOMMON
   133  011D                     __pidataCOMMON:	
   134                           
   135                           ;initializer for _lowerJawSawtoothThreshold
   136  011D  34B7               	retlw	183
   137                           
   138                           ;initializer for _rightLipCornerSawtoothThreshold
   139  011E  34BB               	retlw	187
   140                           
   141                           ;initializer for _leftLipCornerSawtoothThreshold
   142  011F  34BA               	retlw	186
   143                           
   144                           ;initializer for _eyebrowSawtoothThreshold
   145  0120  34BA               	retlw	186
   146                           
   147                           	psect	idataBANK0
   148  0121                     __pidataBANK0:	
   149                           
   150                           ;initializer for _eyelidsSawtoothThreshold
   151  0121  34B9               	retlw	185
   152  000B                     _INTCONbits	set	11
   153  001A                     _RCREG	set	26
   154  0012                     _T2CON	set	18
   155  005E                     _PEIE	set	94
   156  0035                     _RB5	set	53
   157  0065                     _RCIF	set	101
   158  0030                     _RB0	set	48
   159  002B                     _RA3	set	43
   160  002A                     _RA2	set	42
   161  0029                     _RA1	set	41
   162  0028                     _RA0	set	40
   163  00C2                     _FERR	set	194
   164  00C1                     _OERR	set	193
   165  00C7                     _SPEN	set	199
   166  00C4                     _CREN	set	196
   167  0092                     _TMR2ON	set	146
   168  0061                     _TMR2IF	set	97
   169  0099                     _SPBRG	set	153
   170  0092                     _PR2	set	146
   171  0433                     _TRISB3	set	1075
   172  0430                     _TRISB0	set	1072
   173  042B                     _TRISA3	set	1067
   174  042A                     _TRISA2	set	1066
   175  0429                     _TRISA1	set	1065
   176  0428                     _TRISA0	set	1064
   177  04C2                     _BRGH	set	1218
   178  0431                     _TRISB1	set	1073
   179  0461                     _TMR2IE	set	1121
   180                           
   181                           ; #config settings
   182  0000                     
   183                           	psect	cinit
   184  000D                     start_initialization:	
   185  000D                     __initialization:	
   186                           
   187                           ; Initialize objects allocated to BANK0
   188  000D  2121               	fcall	__pidataBANK0	;fetch initializer
   189  000E  00A2               	movwf	__pdataBANK0& (0+127)
   190                           
   191                           ; Initialize objects allocated to COMMON
   192  000F  211D               	fcall	__pidataCOMMON	;fetch initializer
   193  0010  00F9               	movwf	__pdataCOMMON& (0+127)
   194  0011  211E               	fcall	__pidataCOMMON+1	;fetch initializer
   195  0012  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   196  0013  211F               	fcall	__pidataCOMMON+2	;fetch initializer
   197  0014  00FB               	movwf	(__pdataCOMMON+2)& (0+127)
   198  0015  2120               	fcall	__pidataCOMMON+3	;fetch initializer
   199  0016  00FC               	movwf	(__pdataCOMMON+3)& (0+127)
   200                           
   201                           ; Clear objects allocated to BANK0
   202  0017  01A0               	clrf	__pbssBANK0& (0+127)
   203  0018  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   204                           
   205                           ; Clear objects allocated to COMMON
   206  0019  01F5               	clrf	__pbssCOMMON& (0+127)
   207  001A  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   208  001B  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   209  001C  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
   210  001D                     end_of_initialization:	
   211                           ;End of C runtime variable initialization code
   212                           
   213  001D                     __end_of__initialization:	
   214  001D  0183               	clrf	3
   215  001E  28CB               	ljmp	_main	;jump to C main() function
   216                           
   217                           	psect	bssCOMMON
   218  0075                     __pbssCOMMON:	
   219  0075                     _sawtoothCounter:	
   220  0075                     	ds	1
   221  0076                     _receiveCounter:	
   222  0076                     	ds	1
   223  0077                     _velocity:	
   224  0077                     	ds	1
   225  0078                     _partMidiNote:	
   226  0078                     	ds	1
   227                           
   228                           	psect	dataCOMMON
   229  0079                     __pdataCOMMON:	
   230  0079                     _lowerJawSawtoothThreshold:	
   231  0079                     	ds	1
   232  007A                     _rightLipCornerSawtoothThreshold:	
   233  007A                     	ds	1
   234  007B                     _leftLipCornerSawtoothThreshold:	
   235  007B                     	ds	1
   236  007C                     _eyebrowSawtoothThreshold:	
   237  007C                     	ds	1
   238                           
   239                           	psect	bssBANK0
   240  0020                     __pbssBANK0:	
   241  0020                     clearFramingError@temp:	
   242  0020                     	ds	1
   243  0021                     clearOverrunError@temp:	
   244  0021                     	ds	1
   245                           
   246                           	psect	dataBANK0
   247  0022                     __pdataBANK0:	
   248  0022                     _eyelidsSawtoothThreshold:	
   249  0022                     	ds	1
   250                           
   251                           	psect	cstackCOMMON
   252  0070                     __pcstackCOMMON:	
   253  0070                     ?_initTMR2:	
   254  0070                     ?_initUSART:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?_clearOverrunError:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?_clearFramingError:	
   261                           ; 1 bytes @ 0x0
   262                           
   263  0070                     ?_initServos:	
   264                           ; 1 bytes @ 0x0
   265                           
   266  0070                     ?_isr:	
   267                           ; 1 bytes @ 0x0
   268                           
   269  0070                     ??_isr:	
   270                           ; 1 bytes @ 0x0
   271                           
   272  0070                     ?_main:	
   273                           ; 1 bytes @ 0x0
   274                           
   275                           
   276                           ; 1 bytes @ 0x0
   277  0070                     	ds	5
   278                           
   279                           	psect	cstackBANK0
   280  0023                     __pcstackBANK0:	
   281  0023                     ??_initTMR2:	
   282  0023                     ??_initUSART:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0023                     ??_clearOverrunError:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0023                     ??_clearFramingError:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0023                     ??_initServos:	
   292                           ; 1 bytes @ 0x0
   293                           
   294                           
   295                           ; 1 bytes @ 0x0
   296  0023                     	ds	1
   297  0024                     ??_main:	
   298                           
   299                           	psect	maintext
   300  00CB                     __pmaintext:	
   301                           ; 1 bytes @ 0x1
   302 ;;
   303 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   304 ;;
   305 ;; *************** function _main *****************
   306 ;; Defined at:
   307 ;;		line 111 in file "ServoController.c"
   308 ;; Parameters:    Size  Location     Type
   309 ;;		None
   310 ;; Auto vars:     Size  Location     Type
   311 ;;		None
   312 ;; Return value:  Size  Location     Type
   313 ;;                  1    wreg      void 
   314 ;; Registers used:
   315 ;;		wreg, status,2, status,0, pclath, cstack
   316 ;; Tracked objects:
   317 ;;		On entry : B00/0
   318 ;;		On exit  : 0/0
   319 ;;		Unchanged: 0/0
   320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   321 ;;      Params:         0       0       0       0
   322 ;;      Locals:         0       0       0       0
   323 ;;      Temps:          0       0       0       0
   324 ;;      Totals:         0       0       0       0
   325 ;;Total ram usage:        0 bytes
   326 ;; Hardware stack levels required when called:    2
   327 ;; This function calls:
   328 ;;		_clearFramingError
   329 ;;		_clearOverrunError
   330 ;;		_initServos
   331 ;;		_initTMR2
   332 ;;		_initUSART
   333 ;; This function is called by:
   334 ;;		Startup code after reset
   335 ;; This function uses a non-reentrant model
   336 ;;
   337                           
   338                           
   339                           ;psect for function _main
   340  00CB                     _main:	
   341                           
   342                           ;ServoController.c: 115:     initServos();
   343                           
   344                           ;incstack = 0
   345                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   346  00CB  2114               	fcall	_initServos
   347                           
   348                           ;ServoController.c: 116:     initUSART();
   349  00CC  2109               	fcall	_initUSART
   350                           
   351                           ;ServoController.c: 117:     initTMR2();
   352  00CD  20DB               	fcall	_initTMR2
   353                           
   354                           ;ServoController.c: 119:     PEIE = 1;
   355  00CE  170B               	bsf	11,6	;volatile
   356                           
   357                           ;ServoController.c: 120:     (INTCONbits.GIE = 1);
   358  00CF  178B               	bsf	11,7	;volatile
   359  00D0                     l1124:	
   360                           ;ServoController.c: 126:     while(1) {
   361                           
   362                           
   363                           ;ServoController.c: 127:         if (OERR)
   364  00D0  1283               	bcf	3,5	;RP0=0, select bank0
   365  00D1  1303               	bcf	3,6	;RP1=0, select bank0
   366  00D2  1C98               	btfss	24,1	;volatile
   367  00D3  28D5               	goto	l1128
   368                           
   369                           ;ServoController.c: 128:             clearOverrunError();
   370  00D4  20EB               	fcall	_clearOverrunError
   371  00D5                     l1128:	
   372                           
   373                           ;ServoController.c: 129:         if(FERR)
   374  00D5  1283               	bcf	3,5	;RP0=0, select bank0
   375  00D6  1303               	bcf	3,6	;RP1=0, select bank0
   376  00D7  1D18               	btfss	24,2	;volatile
   377  00D8  28D0               	goto	l1124
   378                           
   379                           ;ServoController.c: 130:             clearFramingError();
   380  00D9  20FA               	fcall	_clearFramingError
   381                           
   382                           ;ServoController.c: 131:     }
   383  00DA  28D0               	goto	l1124
   384  00DB                     __end_of_main:	
   385                           
   386                           	psect	text1
   387  0109                     __ptext1:	
   388 ;; *************** function _initUSART *****************
   389 ;; Defined at:
   390 ;;		line 52 in file "./usart.h"
   391 ;; Parameters:    Size  Location     Type
   392 ;;		None
   393 ;; Auto vars:     Size  Location     Type
   394 ;;		None
   395 ;; Return value:  Size  Location     Type
   396 ;;                  1    wreg      void 
   397 ;; Registers used:
   398 ;;		wreg
   399 ;; Tracked objects:
   400 ;;		On entry : 0/0
   401 ;;		On exit  : 0/0
   402 ;;		Unchanged: 0/0
   403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   404 ;;      Params:         0       0       0       0
   405 ;;      Locals:         0       0       0       0
   406 ;;      Temps:          0       0       0       0
   407 ;;      Totals:         0       0       0       0
   408 ;;Total ram usage:        0 bytes
   409 ;; Hardware stack levels used:    1
   410 ;; Hardware stack levels required when called:    1
   411 ;; This function calls:
   412 ;;		Nothing
   413 ;; This function is called by:
   414 ;;		_main
   415 ;; This function uses a non-reentrant model
   416 ;;
   417                           
   418                           
   419                           ;psect for function _initUSART
   420  0109                     _initUSART:	
   421                           
   422                           ;./usart.h: 53:     TRISB1 = 1;
   423                           
   424                           ;incstack = 0
   425                           ; Regs used in _initUSART: [wreg]
   426  0109  1683               	bsf	3,5	;RP0=1, select bank1
   427  010A  1303               	bcf	3,6	;RP1=0, select bank1
   428  010B  1486               	bsf	6,1	;volatile
   429                           
   430                           ;./usart.h: 54:     SPBRG = 39;
   431  010C  3027               	movlw	39
   432  010D  0099               	movwf	25	;volatile
   433                           
   434                           ;./usart.h: 55:     BRGH = 1;
   435  010E  1518               	bsf	24,2	;volatile
   436                           
   437                           ;./usart.h: 56:     CREN = 1;
   438  010F  1283               	bcf	3,5	;RP0=0, select bank0
   439  0110  1303               	bcf	3,6	;RP1=0, select bank0
   440  0111  1618               	bsf	24,4	;volatile
   441                           
   442                           ;./usart.h: 57:     SPEN = 1;
   443  0112  1798               	bsf	24,7	;volatile
   444  0113  0008               	return
   445  0114                     __end_of_initUSART:	
   446                           
   447                           	psect	text2
   448  00DB                     __ptext2:	
   449 ;; *************** function _initTMR2 *****************
   450 ;; Defined at:
   451 ;;		line 44 in file "./tmr2.h"
   452 ;; Parameters:    Size  Location     Type
   453 ;;		None
   454 ;; Auto vars:     Size  Location     Type
   455 ;;		None
   456 ;; Return value:  Size  Location     Type
   457 ;;                  1    wreg      void 
   458 ;; Registers used:
   459 ;;		wreg
   460 ;; Tracked objects:
   461 ;;		On entry : 0/0
   462 ;;		On exit  : 0/0
   463 ;;		Unchanged: 0/0
   464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   465 ;;      Params:         0       0       0       0
   466 ;;      Locals:         0       0       0       0
   467 ;;      Temps:          0       0       0       0
   468 ;;      Totals:         0       0       0       0
   469 ;;Total ram usage:        0 bytes
   470 ;; Hardware stack levels used:    1
   471 ;; Hardware stack levels required when called:    1
   472 ;; This function calls:
   473 ;;		Nothing
   474 ;; This function is called by:
   475 ;;		_main
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           
   480                           ;psect for function _initTMR2
   481  00DB                     _initTMR2:	
   482                           
   483                           ;./tmr2.h: 45:     PR2 = 124;
   484                           
   485                           ;incstack = 0
   486                           ; Regs used in _initTMR2: [wreg]
   487  00DB  307C               	movlw	124
   488  00DC  1683               	bsf	3,5	;RP0=1, select bank1
   489  00DD  1303               	bcf	3,6	;RP1=0, select bank1
   490  00DE  0092               	movwf	18	;volatile
   491                           
   492                           ;./tmr2.h: 46:     T2CON = 0b00000001;
   493  00DF  3001               	movlw	1
   494  00E0  1283               	bcf	3,5	;RP0=0, select bank0
   495  00E1  1303               	bcf	3,6	;RP1=0, select bank0
   496  00E2  0092               	movwf	18	;volatile
   497                           
   498                           ;./tmr2.h: 47:     TMR2IF = 0;
   499  00E3  108C               	bcf	12,1	;volatile
   500                           
   501                           ;./tmr2.h: 48:     TMR2IE = 1;
   502  00E4  1683               	bsf	3,5	;RP0=1, select bank1
   503  00E5  1303               	bcf	3,6	;RP1=0, select bank1
   504  00E6  148C               	bsf	12,1	;volatile
   505                           
   506                           ;./tmr2.h: 49:     TMR2ON = 1;
   507  00E7  1283               	bcf	3,5	;RP0=0, select bank0
   508  00E8  1303               	bcf	3,6	;RP1=0, select bank0
   509  00E9  1512               	bsf	18,2	;volatile
   510  00EA  0008               	return
   511  00EB                     __end_of_initTMR2:	
   512                           
   513                           	psect	text3
   514  0114                     __ptext3:	
   515 ;; *************** function _initServos *****************
   516 ;; Defined at:
   517 ;;		line 98 in file "./ServoController.h"
   518 ;; Parameters:    Size  Location     Type
   519 ;;		None
   520 ;; Auto vars:     Size  Location     Type
   521 ;;		None
   522 ;; Return value:  Size  Location     Type
   523 ;;                  1    wreg      void 
   524 ;; Registers used:
   525 ;;		None
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   531 ;;      Params:         0       0       0       0
   532 ;;      Locals:         0       0       0       0
   533 ;;      Temps:          0       0       0       0
   534 ;;      Totals:         0       0       0       0
   535 ;;Total ram usage:        0 bytes
   536 ;; Hardware stack levels used:    1
   537 ;; Hardware stack levels required when called:    1
   538 ;; This function calls:
   539 ;;		Nothing
   540 ;; This function is called by:
   541 ;;		_main
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           
   546                           ;psect for function _initServos
   547  0114                     _initServos:	
   548                           
   549                           ;./ServoController.h: 99:     TRISA0 = 0;
   550                           
   551                           ;incstack = 0
   552                           ; Regs used in _initServos: []
   553  0114  1683               	bsf	3,5	;RP0=1, select bank1
   554  0115  1303               	bcf	3,6	;RP1=0, select bank1
   555  0116  1005               	bcf	5,0	;volatile
   556                           
   557                           ;./ServoController.h: 100:     TRISA1 = 0;
   558  0117  1085               	bcf	5,1	;volatile
   559                           
   560                           ;./ServoController.h: 101:     TRISA2 = 0;
   561  0118  1105               	bcf	5,2	;volatile
   562                           
   563                           ;./ServoController.h: 102:     TRISA3 = 0;
   564  0119  1185               	bcf	5,3	;volatile
   565                           
   566                           ;./ServoController.h: 103:     TRISB0 = 0;
   567  011A  1006               	bcf	6,0	;volatile
   568                           
   569                           ;./ServoController.h: 104:     TRISB3 = 0;
   570  011B  1186               	bcf	6,3	;volatile
   571  011C  0008               	return
   572  011D                     __end_of_initServos:	
   573                           
   574                           	psect	text4
   575  00EB                     __ptext4:	
   576 ;; *************** function _clearOverrunError *****************
   577 ;; Defined at:
   578 ;;		line 65 in file "./usart.h"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   592 ;;      Params:         0       0       0       0
   593 ;;      Locals:         0       0       0       0
   594 ;;      Temps:          0       1       0       0
   595 ;;      Totals:         0       1       0       0
   596 ;;Total ram usage:        1 bytes
   597 ;; Hardware stack levels used:    1
   598 ;; Hardware stack levels required when called:    1
   599 ;; This function calls:
   600 ;;		Nothing
   601 ;; This function is called by:
   602 ;;		_main
   603 ;; This function uses a non-reentrant model
   604 ;;
   605                           
   606                           
   607                           ;psect for function _clearOverrunError
   608  00EB                     _clearOverrunError:	
   609  00EB                     l67:	
   610                           ;incstack = 0
   611                           ; Regs used in _clearOverrunError: [wreg]
   612                           ;./usart.h: 66:     static unsigned char temp = 0;;./usart.h: 67:     do {
   613                           
   614                           
   615                           ;./usart.h: 68:         temp = RCREG;
   616  00EB  1283               	bcf	3,5	;RP0=0, select bank0
   617  00EC  1303               	bcf	3,6	;RP1=0, select bank0
   618  00ED  081A               	movf	26,w	;volatile
   619  00EE  00A3               	movwf	??_clearOverrunError
   620  00EF  0823               	movf	??_clearOverrunError,w
   621  00F0  00A1               	movwf	clearOverrunError@temp
   622                           
   623                           ;./usart.h: 69:         temp = RCREG;
   624  00F1  081A               	movf	26,w	;volatile
   625  00F2  00A3               	movwf	??_clearOverrunError
   626  00F3  0823               	movf	??_clearOverrunError,w
   627  00F4  00A1               	movwf	clearOverrunError@temp
   628                           
   629                           ;./usart.h: 70:         CREN = 0;
   630  00F5  1218               	bcf	24,4	;volatile
   631                           
   632                           ;./usart.h: 71:         CREN = 1;
   633  00F6  1618               	bsf	24,4	;volatile
   634                           
   635                           ;./usart.h: 72:     } while(OERR);
   636  00F7  1C98               	btfss	24,1	;volatile
   637  00F8  0008               	return
   638  00F9  28EB               	goto	l67
   639  00FA                     __end_of_clearOverrunError:	
   640                           
   641                           	psect	text5
   642  00FA                     __ptext5:	
   643 ;; *************** function _clearFramingError *****************
   644 ;; Defined at:
   645 ;;		line 83 in file "./usart.h"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   659 ;;      Params:         0       0       0       0
   660 ;;      Locals:         0       0       0       0
   661 ;;      Temps:          0       1       0       0
   662 ;;      Totals:         0       1       0       0
   663 ;;Total ram usage:        1 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; Hardware stack levels required when called:    1
   666 ;; This function calls:
   667 ;;		Nothing
   668 ;; This function is called by:
   669 ;;		_main
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           
   674                           ;psect for function _clearFramingError
   675  00FA                     _clearFramingError:	
   676  00FA                     l74:	
   677                           ;incstack = 0
   678                           ; Regs used in _clearFramingError: [wreg]
   679                           ;./usart.h: 84:     static unsigned char temp = 0;;./usart.h: 85:     do {
   680                           
   681                           
   682                           ;./usart.h: 86:         temp = RCREG;
   683  00FA  1283               	bcf	3,5	;RP0=0, select bank0
   684  00FB  1303               	bcf	3,6	;RP1=0, select bank0
   685  00FC  081A               	movf	26,w	;volatile
   686  00FD  00A3               	movwf	??_clearFramingError
   687  00FE  0823               	movf	??_clearFramingError,w
   688  00FF  00A0               	movwf	clearFramingError@temp
   689                           
   690                           ;./usart.h: 87:         temp = RCREG;
   691  0100  081A               	movf	26,w	;volatile
   692  0101  00A3               	movwf	??_clearFramingError
   693  0102  0823               	movf	??_clearFramingError,w
   694  0103  00A0               	movwf	clearFramingError@temp
   695                           
   696                           ;./usart.h: 88:         SPEN = 0;
   697  0104  1398               	bcf	24,7	;volatile
   698                           
   699                           ;./usart.h: 89:         SPEN = 1;
   700  0105  1798               	bsf	24,7	;volatile
   701                           
   702                           ;./usart.h: 90:     } while (FERR);
   703  0106  1D18               	btfss	24,2	;volatile
   704  0107  0008               	return
   705  0108  28FA               	goto	l74
   706  0109                     __end_of_clearFramingError:	
   707                           
   708                           	psect	text6
   709  001F                     __ptext6:	
   710 ;; *************** function _isr *****************
   711 ;; Defined at:
   712 ;;		line 57 in file "ServoController.c"
   713 ;; Parameters:    Size  Location     Type
   714 ;;		None
   715 ;; Auto vars:     Size  Location     Type
   716 ;;		None
   717 ;; Return value:  Size  Location     Type
   718 ;;                  1    wreg      void 
   719 ;; Registers used:
   720 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   726 ;;      Params:         0       0       0       0
   727 ;;      Locals:         0       0       0       0
   728 ;;      Temps:          5       0       0       0
   729 ;;      Totals:         5       0       0       0
   730 ;;Total ram usage:        5 bytes
   731 ;; Hardware stack levels used:    1
   732 ;; This function calls:
   733 ;;		Nothing
   734 ;; This function is called by:
   735 ;;		Interrupt level 1
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           
   740                           ;psect for function _isr
   741  001F                     _isr:	
   742                           
   743                           ;ServoController.c: 58:     if (TMR2IF) {
   744  001F  1283               	bcf	3,5	;RP0=0, select bank0
   745  0020  1303               	bcf	3,6	;RP1=0, select bank0
   746  0021  1C8C               	btfss	12,1	;volatile
   747  0022  284B               	goto	i1l102
   748                           
   749                           ;ServoController.c: 59:         ++sawtoothCounter;
   750  0023  3001               	movlw	1
   751  0024  00F0               	movwf	??_isr
   752  0025  0870               	movf	??_isr,w
   753  0026  07F5               	addwf	_sawtoothCounter,f	;volatile
   754                           
   755                           ;ServoController.c: 60:         if (sawtoothCounter >= 180) {
   756  0027  30B4               	movlw	180
   757  0028  0275               	subwf	_sawtoothCounter,w	;volatile
   758  0029  1C03               	skipc
   759  002A  284A               	goto	i1l103
   760                           
   761                           ;ServoController.c: 61:             if (sawtoothCounter >= 200) {
   762  002B  30C8               	movlw	200
   763  002C  0275               	subwf	_sawtoothCounter,w	;volatile
   764  002D  1C03               	skipc
   765  002E  2836               	goto	i1l932
   766                           
   767                           ;ServoController.c: 62:                 RA0 = 0;
   768  002F  1005               	bcf	5,0	;volatile
   769                           
   770                           ;ServoController.c: 63:                 RA1 = 0;
   771  0030  1085               	bcf	5,1	;volatile
   772                           
   773                           ;ServoController.c: 64:                 RA2 = 0;
   774  0031  1105               	bcf	5,2	;volatile
   775                           
   776                           ;ServoController.c: 65:                 RA3 = 0;
   777  0032  1185               	bcf	5,3	;volatile
   778                           
   779                           ;ServoController.c: 66:                 RB0 = 0;
   780  0033  1006               	bcf	6,0	;volatile
   781                           
   782                           ;ServoController.c: 68:                 sawtoothCounter = 0;
   783  0034  01F5               	clrf	_sawtoothCounter	;volatile
   784                           
   785                           ;ServoController.c: 69:             } else {
   786  0035  284A               	goto	i1l103
   787  0036                     i1l932:	
   788                           
   789                           ;ServoController.c: 70:                 if (sawtoothCounter == eyebrowSawtoothThreshold)
      +                           RA0 = 1;
   790  0036  0875               	movf	_sawtoothCounter,w	;volatile
   791  0037  067C               	xorwf	_eyebrowSawtoothThreshold,w	;volatile
   792  0038  1903               	btfsc	3,2
   793  0039  1405               	bsf	5,0	;volatile
   794                           
   795                           ;ServoController.c: 71:                 if (sawtoothCounter == leftLipCornerSawtoothThre
      +                          shold) RA1 = 1;
   796  003A  0875               	movf	_sawtoothCounter,w	;volatile
   797  003B  067B               	xorwf	_leftLipCornerSawtoothThreshold,w	;volatile
   798  003C  1903               	btfsc	3,2
   799  003D  1485               	bsf	5,1	;volatile
   800                           
   801                           ;ServoController.c: 72:                 if (sawtoothCounter == rightLipCornerSawtoothThr
      +                          eshold) RA2 = 1;
   802  003E  0875               	movf	_sawtoothCounter,w	;volatile
   803  003F  067A               	xorwf	_rightLipCornerSawtoothThreshold,w	;volatile
   804  0040  1903               	btfsc	3,2
   805  0041  1505               	bsf	5,2	;volatile
   806                           
   807                           ;ServoController.c: 73:                 if (sawtoothCounter == lowerJawSawtoothThreshold
      +                          ) RA3 = 1;
   808  0042  0875               	movf	_sawtoothCounter,w	;volatile
   809  0043  0679               	xorwf	_lowerJawSawtoothThreshold,w	;volatile
   810  0044  1903               	btfsc	3,2
   811  0045  1585               	bsf	5,3	;volatile
   812                           
   813                           ;ServoController.c: 74:                 if (sawtoothCounter == eyelidsSawtoothThreshold)
      +                           RB0 = 1;
   814  0046  0875               	movf	_sawtoothCounter,w	;volatile
   815  0047  0622               	xorwf	_eyelidsSawtoothThreshold,w	;volatile
   816  0048  1903               	btfsc	3,2
   817  0049  1406               	bsf	6,0	;volatile
   818  004A                     i1l103:	
   819                           ;ServoController.c: 77:        }
   820                           
   821                           ;ServoController.c: 76:             }
   822                           
   823                           
   824                           ;ServoController.c: 78:         TMR2IF = 0;
   825  004A  108C               	bcf	12,1	;volatile
   826  004B                     i1l102:	
   827                           ;ServoController.c: 79:     }
   828                           
   829                           
   830                           ;ServoController.c: 80:     if (RCIF) {
   831  004B  1E8C               	btfss	12,5	;volatile
   832  004C  28C2               	goto	i1l127
   833                           
   834                           ;ServoController.c: 81:         ++receiveCounter;
   835  004D  3001               	movlw	1
   836  004E  00F0               	movwf	??_isr
   837  004F  0870               	movf	??_isr,w
   838  0050  07F6               	addwf	_receiveCounter,f	;volatile
   839                           
   840                           ;ServoController.c: 82:         switch(receiveCounter) {
   841  0051  28AF               	goto	i1l986
   842  0052                     i1l954:	
   843                           ;ServoController.c: 83:             case 1:
   844                           
   845  0052  28AD               	goto	L1
   846  0053                     i1l956:	
   847                           ;ServoController.c: 86:             case 2:
   848                           
   849                           ;ServoController.c: 85:                 break;
   850                           
   851                           ;ServoController.c: 84:                 RCREG = 0;
   852                           
   853                           
   854                           ;ServoController.c: 87:                 partMidiNote = RCREG;
   855  0053  081A               	movf	26,w	;volatile
   856  0054  00F0               	movwf	??_isr
   857  0055  0870               	movf	??_isr,w
   858  0056  00F8               	movwf	_partMidiNote	;volatile
   859                           
   860                           ;ServoController.c: 88:                 break;
   861  0057  28C2               	goto	i1l127
   862  0058                     i1l958:	
   863                           ;ServoController.c: 89:             case 3:
   864                           
   865                           
   866                           ;ServoController.c: 90:                 receiveCounter = 0;
   867  0058  01F6               	clrf	_receiveCounter	;volatile
   868                           
   869                           ;ServoController.c: 91:                 velocity = RCREG;
   870  0059  081A               	movf	26,w	;volatile
   871  005A  00F0               	movwf	??_isr
   872  005B  0870               	movf	??_isr,w
   873  005C  00F7               	movwf	_velocity	;volatile
   874                           
   875                           ;ServoController.c: 92:                 if (velocity > 10) velocity = 10;
   876  005D  300B               	movlw	11
   877  005E  0277               	subwf	_velocity,w	;volatile
   878  005F  1C03               	skipc
   879  0060  288F               	goto	i1l980
   880  0061  300A               	movlw	10
   881  0062  00F0               	movwf	??_isr
   882  0063  0870               	movf	??_isr,w
   883  0064  00F7               	movwf	_velocity	;volatile
   884                           
   885                           ;ServoController.c: 93:                 switch(partMidiNote) {
   886  0065  288F               	goto	i1l980
   887  0066                     i1l966:	
   888                           ;ServoController.c: 94:                     case 0x3C: eyebrowSawtoothThreshold = (180 +
      +                           (velocity)); break;
   889                           
   890  0066  0877               	movf	_velocity,w	;volatile
   891  0067  3EB4               	addlw	180
   892  0068  00F0               	movwf	??_isr
   893  0069  0870               	movf	??_isr,w
   894  006A  00FC               	movwf	_eyebrowSawtoothThreshold	;volatile
   895  006B  28C2               	goto	i1l127
   896  006C                     i1l968:	
   897                           ;ServoController.c: 95:                     case 0x3E: leftLipCornerSawtoothThreshold = 
      +                          (180 + (velocity)); break;
   898                           
   899  006C  0877               	movf	_velocity,w	;volatile
   900  006D  3EB4               	addlw	180
   901  006E  00F0               	movwf	??_isr
   902  006F  0870               	movf	??_isr,w
   903  0070  00FB               	movwf	_leftLipCornerSawtoothThreshold	;volatile
   904  0071  28C2               	goto	i1l127
   905  0072                     i1l970:	
   906                           ;ServoController.c: 96:                     case 0x40: rightLipCornerSawtoothThreshold =
      +                           (180 + (velocity)); break;
   907                           
   908  0072  0877               	movf	_velocity,w	;volatile
   909  0073  3EB4               	addlw	180
   910  0074  00F0               	movwf	??_isr
   911  0075  0870               	movf	??_isr,w
   912  0076  00FA               	movwf	_rightLipCornerSawtoothThreshold	;volatile
   913  0077  28C2               	goto	i1l127
   914  0078                     i1l972:	
   915                           ;ServoController.c: 97:                     case 0x43: lowerJawSawtoothThreshold = (180 
      +                          + (velocity)); break;
   916                           
   917  0078  0877               	movf	_velocity,w	;volatile
   918  0079  3EB4               	addlw	180
   919  007A  00F0               	movwf	??_isr
   920  007B  0870               	movf	??_isr,w
   921  007C  00F9               	movwf	_lowerJawSawtoothThreshold	;volatile
   922  007D  28C2               	goto	i1l127
   923  007E                     i1l974:	
   924                           ;ServoController.c: 98:                     case 0x45: eyelidsSawtoothThreshold = (180 +
      +                           (velocity)); break;
   925                           
   926  007E  0877               	movf	_velocity,w	;volatile
   927  007F  3EB4               	addlw	180
   928  0080  00F0               	movwf	??_isr
   929  0081  0870               	movf	??_isr,w
   930  0082  00A2               	movwf	_eyelidsSawtoothThreshold	;volatile
   931  0083  28C2               	goto	i1l127
   932  0084                     i1l976:	
   933                           ;ServoController.c: 100:                     case 0x4A: RB5 = (velocity > 0) ? 1 : 0; br
      +                          eak;
   934                           
   935  0084  0877               	movf	_velocity,w	;volatile
   936  0085  1903               	btfsc	3,2
   937  0086  288B               	goto	u29_20
   938  0087  1283               	bcf	3,5	;RP0=0, select bank0
   939  0088  1303               	bcf	3,6	;RP1=0, select bank0
   940  0089  1686               	bsf	6,5	;volatile
   941  008A  28C2               	goto	i1l127
   942  008B                     u29_20:	
   943  008B  1283               	bcf	3,5	;RP0=0, select bank0
   944  008C  1303               	bcf	3,6	;RP1=0, select bank0
   945  008D  1286               	bcf	6,5	;volatile
   946                           
   947                           ;ServoController.c: 101:                 }
   948  008E  28C2               	goto	i1l127
   949  008F                     i1l980:	
   950  008F  0878               	movf	_partMidiNote,w	;volatile
   951  0090  00F0               	movwf	??_isr
   952  0091  01F1               	clrf	??_isr+1
   953                           
   954                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   955                           ; Switch size 1, requested type "space"
   956                           ; Number of cases is 1, Range of values is 0 to 0
   957                           ; switch strategies available:
   958                           ; Name         Instructions Cycles
   959                           ; simple_byte            4     3 (average)
   960                           ; direct_byte            7     6 (fixed)
   961                           ; jumptable            260     6 (fixed)
   962                           ;	Chosen strategy is simple_byte
   963  0092  0871               	movf	??_isr+1,w
   964  0093  3A00               	xorlw	0	; case 0
   965  0094  1903               	skipnz
   966  0095  2897               	goto	i1l1192
   967  0096  28C2               	goto	i1l127
   968  0097                     i1l1192:	
   969                           
   970                           ; Switch size 1, requested type "space"
   971                           ; Number of cases is 6, Range of values is 60 to 74
   972                           ; switch strategies available:
   973                           ; Name         Instructions Cycles
   974                           ; simple_byte           19    10 (average)
   975                           ; direct_byte           24     9 (fixed)
   976                           ; jumptable            263     9 (fixed)
   977                           ;	Chosen strategy is simple_byte
   978  0097  0870               	movf	??_isr,w
   979  0098  3A3C               	xorlw	60	; case 60
   980  0099  1903               	skipnz
   981  009A  2866               	goto	i1l966
   982  009B  3A02               	xorlw	2	; case 62
   983  009C  1903               	skipnz
   984  009D  286C               	goto	i1l968
   985  009E  3A7E               	xorlw	126	; case 64
   986  009F  1903               	skipnz
   987  00A0  2872               	goto	i1l970
   988  00A1  3A03               	xorlw	3	; case 67
   989  00A2  1903               	skipnz
   990  00A3  2878               	goto	i1l972
   991  00A4  3A06               	xorlw	6	; case 69
   992  00A5  1903               	skipnz
   993  00A6  287E               	goto	i1l974
   994  00A7  3A0F               	xorlw	15	; case 74
   995  00A8  1903               	skipnz
   996  00A9  2884               	goto	i1l976
   997  00AA  28C2               	goto	i1l127
   998                           
   999                           ;ServoController.c: 102:                 break;
  1000  00AB  28C2               	goto	i1l127
  1001  00AC                     i1l982:	
  1002                           ;ServoController.c: 103:             default:
  1003                           
  1004                           
  1005                           ;ServoController.c: 104:                 receiveCounter = 0;
  1006  00AC  01F6               	clrf	_receiveCounter	;volatile
  1007  00AD                     L1:	
  1008                           
  1009                           ;ServoController.c: 105:                 RCREG = 0;
  1010  00AD  019A               	clrf	26	;volatile
  1011                           
  1012                           ;ServoController.c: 107:         }
  1013                           
  1014                           ;ServoController.c: 106:                 break;
  1015  00AE  28C2               	goto	i1l127
  1016  00AF                     i1l986:	
  1017  00AF  0876               	movf	_receiveCounter,w	;volatile
  1018  00B0  00F0               	movwf	??_isr
  1019  00B1  01F1               	clrf	??_isr+1
  1020                           
  1021                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1022                           ; Switch size 1, requested type "space"
  1023                           ; Number of cases is 1, Range of values is 0 to 0
  1024                           ; switch strategies available:
  1025                           ; Name         Instructions Cycles
  1026                           ; simple_byte            4     3 (average)
  1027                           ; direct_byte            7     6 (fixed)
  1028                           ; jumptable            260     6 (fixed)
  1029                           ;	Chosen strategy is simple_byte
  1030  00B2  0871               	movf	??_isr+1,w
  1031  00B3  3A00               	xorlw	0	; case 0
  1032  00B4  1903               	skipnz
  1033  00B5  28B7               	goto	i1l1194
  1034  00B6  28AC               	goto	i1l982
  1035  00B7                     i1l1194:	
  1036                           
  1037                           ; Switch size 1, requested type "space"
  1038                           ; Number of cases is 3, Range of values is 1 to 3
  1039                           ; switch strategies available:
  1040                           ; Name         Instructions Cycles
  1041                           ; simple_byte           10     6 (average)
  1042                           ; direct_byte           12     9 (fixed)
  1043                           ; jumptable            263     9 (fixed)
  1044                           ;	Chosen strategy is simple_byte
  1045  00B7  0870               	movf	??_isr,w
  1046  00B8  3A01               	xorlw	1	; case 1
  1047  00B9  1903               	skipnz
  1048  00BA  2852               	goto	i1l954
  1049  00BB  3A03               	xorlw	3	; case 2
  1050  00BC  1903               	skipnz
  1051  00BD  2853               	goto	i1l956
  1052  00BE  3A01               	xorlw	1	; case 3
  1053  00BF  1903               	skipnz
  1054  00C0  2858               	goto	i1l958
  1055  00C1  28AC               	goto	i1l982
  1056  00C2                     i1l127:	
  1057                           ;ServoController.c: 108:     }
  1058                           
  1059  00C2  0874               	movf	??_isr+4,w
  1060  00C3  008A               	movwf	10
  1061  00C4  0873               	movf	??_isr+3,w
  1062  00C5  0084               	movwf	4
  1063  00C6  0E72               	swapf	(??_isr+2)^(0+4294967168),w
  1064  00C7  0083               	movwf	3
  1065  00C8  0EFE               	swapf	126,f
  1066  00C9  0E7E               	swapf	126,w
  1067  00CA  0009               	retfie
  1068  00CB                     __end_of_isr:	
  1069  007E                     btemp	set	126	;btemp
  1070  007E                     wtemp0	set	126
  1071                           
  1072                           	psect	intentry
  1073  0004                     __pintentry:	
  1074                           ;incstack = 0
  1075                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0]
  1076                           
  1077  0004                     interrupt_function:	
  1078  007E                     saved_w	set	btemp
  1079  0004  00FE               	movwf	btemp
  1080  0005  0E03               	swapf	3,w
  1081  0006  00F2               	movwf	??_isr+2
  1082  0007  0804               	movf	4,w
  1083  0008  00F3               	movwf	??_isr+3
  1084  0009  080A               	movf	10,w
  1085  000A  00F4               	movwf	??_isr+4
  1086  000B  281F               	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      13
    BANK0            80      1       4
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_clearFramingError
    _main->_clearOverrunError

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                  _clearFramingError
                  _clearOverrunError
                         _initServos
                           _initTMR2
                          _initUSART
 ---------------------------------------------------------------------------------
 (1) _initUSART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTMR2                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServos                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clearOverrunError                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _clearFramingError                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearFramingError
   _clearOverrunError
   _initServos
   _initTMR2
   _initUSART

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1       4       3        5.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      11      10        0.0%
ABS                  0      0      11       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Aug 10 22:49:01 2018

                     __CFG_CP$ON 0000                               l74 00FA                               l67 00EB  
                    __CFG_CPD$ON 0000       __size_of_clearFramingError 000F                              _RA0 0028  
                            _RA1 0029                              _RA2 002A                              _RB0 0030  
                            _RA3 002B                              _RB5 0035                              _PR2 0092  
                            _isr 001F                              fsr0 0004                     __CFG_FOSC$HS 0000  
                   __CFG_LVP$OFF 0000                             l1124 00D0                             l1128 00D5  
                           ?_isr 0070                             _BRGH 04C2                             _CREN 00C4  
                           _FERR 00C2                             _PEIE 005E                             _RCIF 0065  
                           _OERR 00C1                             _SPEN 00C7                             _main 00CB  
                           btemp 007E                    __CFG_BOREN$ON 0000        _lowerJawSawtoothThreshold 0079  
                           start 000C                            ??_isr 0070                            ?_main 0070  
                  __CFG_WDTE$OFF 0000                            _T2CON 0012                            i1l102 004B  
                          i1l103 004A                            i1l127 00C2                            i1l932 0036  
                          i1l970 0072                            i1l954 0052                            i1l972 0078  
                          i1l980 008F                            i1l956 0053                            i1l982 00AC  
                          i1l974 007E                            i1l966 0066                            i1l958 0058  
                          i1l976 0084                            i1l968 006C                            i1l986 00AF  
                          _RCREG 001A                            _SPBRG 0099                            u29_20 008B  
                  __CFG_PWRTE$ON 0000                            pclath 000A                            status 0003  
                          wtemp0 007E         _eyebrowSawtoothThreshold 007C         _eyelidsSawtoothThreshold 0022  
                 __CFG_MCLRE$OFF 0000                  __initialization 000D                     __end_of_main 00DB  
                         ??_main 0024                           i1l1192 0097                           i1l1194 00B7  
                         _TMR2IE 0461                           _TMR2IF 0061                           _TMR2ON 0092  
                         _TRISA0 0428                           _TRISA1 0429                           _TRISA2 042A  
                         _TRISB0 0430                           _TRISB1 0431                           _TRISA3 042B  
                         _TRISB3 0433                 __end_of_initTMR2 00EB                     __pdataCOMMON 0079  
                         saved_w 007E            clearOverrunError@temp 0021          __end_of__initialization 001D  
                 __pcstackCOMMON 0070                     __pidataBANK0 0121                _clearOverrunError 00EB  
             ?_clearOverrunError 0070              ??_clearOverrunError 0023                       __pbssBANK0 0020  
             __size_of_initUSART 000B                       __pmaintext 00CB                       __pintentry 0004  
      __end_of_clearOverrunError 00FA                        ?_initTMR2 0070                       _initServos 0114  
              __end_of_initUSART 0114                          __ptext1 0109                          __ptext2 00DB  
                        __ptext3 0114                          __ptext4 00EB                          __ptext5 00FA  
                        __ptext6 001F                     __size_of_isr 00AC             end_of_initialization 001D  
                _sawtoothCounter 0075                       ??_initTMR2 0023       __size_of_clearOverrunError 000F  
                    ?_initServos 0070                    __pidataCOMMON 011D              start_initialization 000D  
                    __end_of_isr 00CB            clearFramingError@temp 0020                      __pdataBANK0 0022  
                    __pbssCOMMON 0075                        ___latbits 0000                    __pcstackBANK0 0023  
 _leftLipCornerSawtoothThreshold 007B              __size_of_initServos 0009                __size_of_initTMR2 0010  
                      _initUSART 0109  _rightLipCornerSawtoothThreshold 007A                     _partMidiNote 0078  
              interrupt_function 0004                       ?_initUSART 0070                     ??_initServos 0023  
              _clearFramingError 00FA               ?_clearFramingError 0070                         _initTMR2 00DB  
             __end_of_initServos 011D              ??_clearFramingError 0023                    __size_of_main 0010  
                 _receiveCounter 0076                         _velocity 0077        __end_of_clearFramingError 0109  
                     _INTCONbits 000B                      ??_initUSART 0023                         intlevel1 0000  
