

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 01 14:04:33 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F628A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  008C                     	;# 
    83  008E                     	;# 
    84  0092                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009F                     	;# 
    92                           
    93                           	psect	idataCOMMON
    94  0103                     __pidataCOMMON:	
    95                           
    96                           ;initializer for _eyelidsSliderVal
    97  0103  34B9               	retlw	185
    98                           
    99                           ;initializer for _lowerJawSliderVal
   100  0104  34B7               	retlw	183
   101                           
   102                           ;initializer for _rightLipCornerSliderVal
   103  0105  34BB               	retlw	187
   104                           
   105                           ;initializer for _leftLipCornerSliderVal
   106  0106  34BA               	retlw	186
   107                           
   108                           ;initializer for _eyebrowSliderVal
   109  0107  34BA               	retlw	186
   110  000B                     _INTCON	set	11
   111  000C                     _PIR1	set	12
   112  001A                     _RCREG	set	26
   113  0018                     _RCSTA	set	24
   114  0012                     _T2CON	set	18
   115  0035                     _RB5	set	53
   116  0065                     _RCIF	set	101
   117  002C                     _RA4	set	44
   118  002B                     _RA3	set	43
   119  002A                     _RA2	set	42
   120  0029                     _RA1	set	41
   121  0028                     _RA0	set	40
   122  0061                     _TMR2IF	set	97
   123  00C2                     _FERR	set	194
   124  00C7                     _SPEN	set	199
   125  00C1                     _OERR	set	193
   126  00C4                     _CREN	set	196
   127  0098                     _TXSTA	set	152
   128  0099                     _SPBRG	set	153
   129  008C                     _PIE1	set	140
   130  0092                     _PR2	set	146
   131  0433                     _TRISB3	set	1075
   132  0430                     _TRISB0	set	1072
   133  042B                     _TRISA3	set	1067
   134  042A                     _TRISA2	set	1066
   135  0429                     _TRISA1	set	1065
   136  0428                     _TRISA0	set	1064
   137  0431                     _TRISB1	set	1073
   138                           
   139                           ; #config settings
   140  0000                     
   141                           	psect	cinit
   142  0011                     start_initialization:	
   143  0011                     __initialization:	
   144                           
   145                           ; Initialize objects allocated to COMMON
   146  0011  2103               	fcall	__pidataCOMMON	;fetch initializer
   147  0012  00F0               	movwf	__pdataCOMMON& (0+127)
   148  0013  2104               	fcall	__pidataCOMMON+1	;fetch initializer
   149  0014  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   150  0015  2105               	fcall	__pidataCOMMON+2	;fetch initializer
   151  0016  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   152  0017  2106               	fcall	__pidataCOMMON+3	;fetch initializer
   153  0018  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   154  0019  2107               	fcall	__pidataCOMMON+4	;fetch initializer
   155  001A  00F4               	movwf	(__pdataCOMMON+4)& (0+127)
   156                           
   157                           ; Clear objects allocated to BANK0
   158  001B  01A0               	clrf	__pbssBANK0& (0+127)
   159  001C  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   160                           
   161                           ; Clear objects allocated to COMMON
   162  001D  01FA               	clrf	__pbssCOMMON& (0+127)
   163  001E  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   164  001F  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   165  0020                     end_of_initialization:	
   166                           ;End of C runtime variable initialization code
   167                           
   168  0020                     __end_of__initialization:	
   169  0020  0183               	clrf	3
   170  0021  28B2               	ljmp	_main	;jump to C main() function
   171                           
   172                           	psect	bssCOMMON
   173  007A                     __pbssCOMMON:	
   174  007A                     _sawtoothCounter:	
   175  007A                     	ds	1
   176  007B                     _receiveCounter:	
   177  007B                     	ds	1
   178  007C                     _part:	
   179  007C                     	ds	1
   180                           
   181                           	psect	dataCOMMON
   182  0070                     __pdataCOMMON:	
   183  0070                     _eyelidsSliderVal:	
   184  0070                     	ds	1
   185  0071                     _lowerJawSliderVal:	
   186  0071                     	ds	1
   187  0072                     _rightLipCornerSliderVal:	
   188  0072                     	ds	1
   189  0073                     _leftLipCornerSliderVal:	
   190  0073                     	ds	1
   191  0074                     _eyebrowSliderVal:	
   192  0074                     	ds	1
   193                           
   194                           	psect	bssBANK0
   195  0020                     __pbssBANK0:	
   196  0020                     clearFramingError@temp:	
   197  0020                     	ds	1
   198  0021                     clearOverrunError@temp:	
   199  0021                     	ds	1
   200                           
   201                           	psect	cstackCOMMON
   202  0075                     __pcstackCOMMON:	
   203  0075                     ?_initTMR2:	
   204  0075                     ?_initUSART:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0075                     ?_clearOverrunError:	
   208                           ; 1 bytes @ 0x0
   209                           
   210  0075                     ?_clearFramingError:	
   211                           ; 1 bytes @ 0x0
   212                           
   213  0075                     ?_initServos:	
   214                           ; 1 bytes @ 0x0
   215                           
   216  0075                     ?_isr:	
   217                           ; 1 bytes @ 0x0
   218                           
   219  0075                     ??_isr:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0075                     ?_main:	
   223                           ; 1 bytes @ 0x0
   224                           
   225                           
   226                           ; 1 bytes @ 0x0
   227  0075                     	ds	5
   228                           
   229                           	psect	cstackBANK0
   230  0022                     __pcstackBANK0:	
   231  0022                     ??_initTMR2:	
   232  0022                     ??_initUSART:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0022                     ??_clearOverrunError:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0022                     ??_clearFramingError:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0022                     ??_initServos:	
   242                           ; 1 bytes @ 0x0
   243                           
   244                           
   245                           ; 1 bytes @ 0x0
   246  0022                     	ds	1
   247  0023                     ??_main:	
   248                           
   249                           	psect	maintext
   250  00B2                     __pmaintext:	
   251                           ; 1 bytes @ 0x1
   252 ;;
   253 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   254 ;;
   255 ;; *************** function _main *****************
   256 ;; Defined at:
   257 ;;		line 103 in file "ServoController.c"
   258 ;; Parameters:    Size  Location     Type
   259 ;;		None
   260 ;; Auto vars:     Size  Location     Type
   261 ;;		None
   262 ;; Return value:  Size  Location     Type
   263 ;;                  1    wreg      void 
   264 ;; Registers used:
   265 ;;		wreg, status,2, status,0, pclath, cstack
   266 ;; Tracked objects:
   267 ;;		On entry : B00/0
   268 ;;		On exit  : 0/0
   269 ;;		Unchanged: 0/0
   270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   271 ;;      Params:         0       0       0       0
   272 ;;      Locals:         0       0       0       0
   273 ;;      Temps:          0       0       0       0
   274 ;;      Totals:         0       0       0       0
   275 ;;Total ram usage:        0 bytes
   276 ;; Hardware stack levels required when called:    2
   277 ;; This function calls:
   278 ;;		_clearFramingError
   279 ;;		_clearOverrunError
   280 ;;		_initServos
   281 ;;		_initTMR2
   282 ;;		_initUSART
   283 ;; This function is called by:
   284 ;;		Startup code after reset
   285 ;; This function uses a non-reentrant model
   286 ;;
   287                           
   288                           
   289                           ;psect for function _main
   290  00B2                     _main:	
   291                           
   292                           ;ServoController.c: 107: initServos();
   293                           
   294                           ;incstack = 0
   295                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   296  00B2  20FA               	fcall	_initServos
   297                           
   298                           ;ServoController.c: 108: initUSART();
   299  00B3  20E3               	fcall	_initUSART
   300                           
   301                           ;ServoController.c: 109: initTMR2();
   302  00B4  20EF               	fcall	_initTMR2
   303                           
   304                           ;ServoController.c: 110: PIR1 = 0b00000000;
   305  00B5  1283               	bcf	3,5	;RP0=0, select bank0
   306  00B6  1303               	bcf	3,6	;RP1=0, select bank0
   307  00B7  018C               	clrf	12	;volatile
   308                           
   309                           ;ServoController.c: 111: INTCON = 0b11000000;
   310  00B8  30C0               	movlw	192
   311  00B9  008B               	movwf	11	;volatile
   312  00BA                     l766:	
   313                           ;ServoController.c: 117: while(1) {
   314                           
   315                           
   316                           ;ServoController.c: 118: if (OERR)
   317  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   318  00BB  1303               	bcf	3,6	;RP1=0, select bank0
   319  00BC  1C98               	btfss	24,1	;volatile
   320  00BD  28BF               	goto	l770
   321                           
   322                           ;ServoController.c: 119: clearOverrunError();
   323  00BE  20C5               	fcall	_clearOverrunError
   324  00BF                     l770:	
   325                           
   326                           ;ServoController.c: 120: if(FERR)
   327  00BF  1283               	bcf	3,5	;RP0=0, select bank0
   328  00C0  1303               	bcf	3,6	;RP1=0, select bank0
   329  00C1  1D18               	btfss	24,2	;volatile
   330  00C2  28BA               	goto	l766
   331                           
   332                           ;ServoController.c: 121: clearFramingError();
   333  00C3  20D4               	fcall	_clearFramingError
   334  00C4  28BA               	goto	l766
   335  00C5                     __end_of_main:	
   336                           
   337                           	psect	text1
   338  00E3                     __ptext1:	
   339 ;; *************** function _initUSART *****************
   340 ;; Defined at:
   341 ;;		line 65 in file "usart.h"
   342 ;; Parameters:    Size  Location     Type
   343 ;;		None
   344 ;; Auto vars:     Size  Location     Type
   345 ;;		None
   346 ;; Return value:  Size  Location     Type
   347 ;;                  1    wreg      void 
   348 ;; Registers used:
   349 ;;		wreg
   350 ;; Tracked objects:
   351 ;;		On entry : 0/0
   352 ;;		On exit  : 0/0
   353 ;;		Unchanged: 0/0
   354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   355 ;;      Params:         0       0       0       0
   356 ;;      Locals:         0       0       0       0
   357 ;;      Temps:          0       0       0       0
   358 ;;      Totals:         0       0       0       0
   359 ;;Total ram usage:        0 bytes
   360 ;; Hardware stack levels used:    1
   361 ;; Hardware stack levels required when called:    1
   362 ;; This function calls:
   363 ;;		Nothing
   364 ;; This function is called by:
   365 ;;		_main
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369                           
   370                           ;psect for function _initUSART
   371  00E3                     _initUSART:	
   372                           
   373                           ;usart.h: 66: SPBRG = 39;
   374                           
   375                           ;incstack = 0
   376                           ; Regs used in _initUSART: [wreg]
   377  00E3  3027               	movlw	39
   378  00E4  1683               	bsf	3,5	;RP0=1, select bank1
   379  00E5  1303               	bcf	3,6	;RP1=0, select bank1
   380  00E6  0099               	movwf	25	;volatile
   381                           
   382                           ;usart.h: 67: TRISB1 = 1;
   383  00E7  1486               	bsf	6,1	;volatile
   384                           
   385                           ;usart.h: 68: TXSTA = 0b10100100;
   386  00E8  30A4               	movlw	164
   387  00E9  0098               	movwf	24	;volatile
   388                           
   389                           ;usart.h: 69: RCSTA = 0b10010000;
   390  00EA  3090               	movlw	144
   391  00EB  1283               	bcf	3,5	;RP0=0, select bank0
   392  00EC  1303               	bcf	3,6	;RP1=0, select bank0
   393  00ED  0098               	movwf	24	;volatile
   394  00EE  0008               	return
   395  00EF                     __end_of_initUSART:	
   396                           
   397                           	psect	text2
   398  00EF                     __ptext2:	
   399 ;; *************** function _initTMR2 *****************
   400 ;; Defined at:
   401 ;;		line 50 in file "tmr2.h"
   402 ;; Parameters:    Size  Location     Type
   403 ;;		None
   404 ;; Auto vars:     Size  Location     Type
   405 ;;		None
   406 ;; Return value:  Size  Location     Type
   407 ;;                  1    wreg      void 
   408 ;; Registers used:
   409 ;;		wreg
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   415 ;;      Params:         0       0       0       0
   416 ;;      Locals:         0       0       0       0
   417 ;;      Temps:          0       0       0       0
   418 ;;      Totals:         0       0       0       0
   419 ;;Total ram usage:        0 bytes
   420 ;; Hardware stack levels used:    1
   421 ;; Hardware stack levels required when called:    1
   422 ;; This function calls:
   423 ;;		Nothing
   424 ;; This function is called by:
   425 ;;		_main
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           
   430                           ;psect for function _initTMR2
   431  00EF                     _initTMR2:	
   432                           
   433                           ;tmr2.h: 51: T2CON = 0b00000101;
   434                           
   435                           ;incstack = 0
   436                           ; Regs used in _initTMR2: [wreg]
   437  00EF  3005               	movlw	5
   438  00F0  1283               	bcf	3,5	;RP0=0, select bank0
   439  00F1  1303               	bcf	3,6	;RP1=0, select bank0
   440  00F2  0092               	movwf	18	;volatile
   441                           
   442                           ;tmr2.h: 52: PR2 = 124;
   443  00F3  307C               	movlw	124
   444  00F4  1683               	bsf	3,5	;RP0=1, select bank1
   445  00F5  1303               	bcf	3,6	;RP1=0, select bank1
   446  00F6  0092               	movwf	18	;volatile
   447                           
   448                           ;tmr2.h: 53: PIE1 = 0b00100010;
   449  00F7  3022               	movlw	34
   450  00F8  008C               	movwf	12	;volatile
   451  00F9  0008               	return
   452  00FA                     __end_of_initTMR2:	
   453                           
   454                           	psect	text3
   455  00FA                     __ptext3:	
   456 ;; *************** function _initServos *****************
   457 ;; Defined at:
   458 ;;		line 80 in file "ServoController.h"
   459 ;; Parameters:    Size  Location     Type
   460 ;;		None
   461 ;; Auto vars:     Size  Location     Type
   462 ;;		None
   463 ;; Return value:  Size  Location     Type
   464 ;;                  1    wreg      void 
   465 ;; Registers used:
   466 ;;		None
   467 ;; Tracked objects:
   468 ;;		On entry : 0/0
   469 ;;		On exit  : 0/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   472 ;;      Params:         0       0       0       0
   473 ;;      Locals:         0       0       0       0
   474 ;;      Temps:          0       0       0       0
   475 ;;      Totals:         0       0       0       0
   476 ;;Total ram usage:        0 bytes
   477 ;; Hardware stack levels used:    1
   478 ;; Hardware stack levels required when called:    1
   479 ;; This function calls:
   480 ;;		Nothing
   481 ;; This function is called by:
   482 ;;		_main
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           
   487                           ;psect for function _initServos
   488  00FA                     _initServos:	
   489                           
   490                           ;ServoController.h: 81: TRISA0 = 0;
   491                           
   492                           ;incstack = 0
   493                           ; Regs used in _initServos: []
   494  00FA  1683               	bsf	3,5	;RP0=1, select bank1
   495  00FB  1303               	bcf	3,6	;RP1=0, select bank1
   496  00FC  1005               	bcf	5,0	;volatile
   497                           
   498                           ;ServoController.h: 82: TRISA1 = 0;
   499  00FD  1085               	bcf	5,1	;volatile
   500                           
   501                           ;ServoController.h: 83: TRISA2 = 0;
   502  00FE  1105               	bcf	5,2	;volatile
   503                           
   504                           ;ServoController.h: 84: TRISA3 = 0;
   505  00FF  1185               	bcf	5,3	;volatile
   506                           
   507                           ;ServoController.h: 85: TRISB0 = 0;
   508  0100  1006               	bcf	6,0	;volatile
   509                           
   510                           ;ServoController.h: 86: TRISB3 = 0;
   511  0101  1186               	bcf	6,3	;volatile
   512  0102  0008               	return
   513  0103                     __end_of_initServos:	
   514                           
   515                           	psect	text4
   516  00C5                     __ptext4:	
   517 ;; *************** function _clearOverrunError *****************
   518 ;; Defined at:
   519 ;;		line 78 in file "usart.h"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;		None
   524 ;; Return value:  Size  Location     Type
   525 ;;                  1    wreg      void 
   526 ;; Registers used:
   527 ;;		wreg
   528 ;; Tracked objects:
   529 ;;		On entry : 0/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   533 ;;      Params:         0       0       0       0
   534 ;;      Locals:         0       0       0       0
   535 ;;      Temps:          0       1       0       0
   536 ;;      Totals:         0       1       0       0
   537 ;;Total ram usage:        1 bytes
   538 ;; Hardware stack levels used:    1
   539 ;; Hardware stack levels required when called:    1
   540 ;; This function calls:
   541 ;;		Nothing
   542 ;; This function is called by:
   543 ;;		_main
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           
   548                           ;psect for function _clearOverrunError
   549  00C5                     _clearOverrunError:	
   550  00C5                     l67:	
   551                           ;incstack = 0
   552                           ; Regs used in _clearOverrunError: [wreg]
   553                           ;usart.h: 79: static unsigned char temp = 0;
   554                           ;usart.h: 80: do {
   555                           
   556                           
   557                           ;usart.h: 81: temp = RCREG;
   558  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   559  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   560  00C7  081A               	movf	26,w	;volatile
   561  00C8  00A2               	movwf	??_clearOverrunError
   562  00C9  0822               	movf	??_clearOverrunError,w
   563  00CA  00A1               	movwf	clearOverrunError@temp
   564                           
   565                           ;usart.h: 82: temp = RCREG;
   566  00CB  081A               	movf	26,w	;volatile
   567  00CC  00A2               	movwf	??_clearOverrunError
   568  00CD  0822               	movf	??_clearOverrunError,w
   569  00CE  00A1               	movwf	clearOverrunError@temp
   570                           
   571                           ;usart.h: 83: CREN = 0;
   572  00CF  1218               	bcf	24,4	;volatile
   573                           
   574                           ;usart.h: 84: CREN = 1;
   575  00D0  1618               	bsf	24,4	;volatile
   576                           
   577                           ;usart.h: 85: } while(OERR);
   578  00D1  1C98               	btfss	24,1	;volatile
   579  00D2  0008               	return
   580  00D3  28C5               	goto	l67
   581  00D4                     __end_of_clearOverrunError:	
   582                           
   583                           	psect	text5
   584  00D4                     __ptext5:	
   585 ;; *************** function _clearFramingError *****************
   586 ;; Defined at:
   587 ;;		line 96 in file "usart.h"
   588 ;; Parameters:    Size  Location     Type
   589 ;;		None
   590 ;; Auto vars:     Size  Location     Type
   591 ;;		None
   592 ;; Return value:  Size  Location     Type
   593 ;;                  1    wreg      void 
   594 ;; Registers used:
   595 ;;		wreg
   596 ;; Tracked objects:
   597 ;;		On entry : 0/0
   598 ;;		On exit  : 0/0
   599 ;;		Unchanged: 0/0
   600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   601 ;;      Params:         0       0       0       0
   602 ;;      Locals:         0       0       0       0
   603 ;;      Temps:          0       1       0       0
   604 ;;      Totals:         0       1       0       0
   605 ;;Total ram usage:        1 bytes
   606 ;; Hardware stack levels used:    1
   607 ;; Hardware stack levels required when called:    1
   608 ;; This function calls:
   609 ;;		Nothing
   610 ;; This function is called by:
   611 ;;		_main
   612 ;; This function uses a non-reentrant model
   613 ;;
   614                           
   615                           
   616                           ;psect for function _clearFramingError
   617  00D4                     _clearFramingError:	
   618  00D4                     l74:	
   619                           ;incstack = 0
   620                           ; Regs used in _clearFramingError: [wreg]
   621                           ;usart.h: 97: static unsigned char temp = 0;
   622                           ;usart.h: 98: do {
   623                           
   624                           
   625                           ;usart.h: 99: temp = RCREG;
   626  00D4  1283               	bcf	3,5	;RP0=0, select bank0
   627  00D5  1303               	bcf	3,6	;RP1=0, select bank0
   628  00D6  081A               	movf	26,w	;volatile
   629  00D7  00A2               	movwf	??_clearFramingError
   630  00D8  0822               	movf	??_clearFramingError,w
   631  00D9  00A0               	movwf	clearFramingError@temp
   632                           
   633                           ;usart.h: 100: temp = RCREG;
   634  00DA  081A               	movf	26,w	;volatile
   635  00DB  00A2               	movwf	??_clearFramingError
   636  00DC  0822               	movf	??_clearFramingError,w
   637  00DD  00A0               	movwf	clearFramingError@temp
   638                           
   639                           ;usart.h: 101: SPEN = 0;
   640  00DE  1398               	bcf	24,7	;volatile
   641                           
   642                           ;usart.h: 102: SPEN = 1;
   643  00DF  1798               	bsf	24,7	;volatile
   644                           
   645                           ;usart.h: 103: } while (FERR);
   646  00E0  1D18               	btfss	24,2	;volatile
   647  00E1  0008               	return
   648  00E2  28D4               	goto	l74
   649  00E3                     __end_of_clearFramingError:	
   650                           
   651                           	psect	text6
   652  0022                     __ptext6:	
   653 ;; *************** function _isr *****************
   654 ;; Defined at:
   655 ;;		line 52 in file "ServoController.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;		None
   658 ;; Auto vars:     Size  Location     Type
   659 ;;		None
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      void 
   662 ;; Registers used:
   663 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   669 ;;      Params:         0       0       0       0
   670 ;;      Locals:         0       0       0       0
   671 ;;      Temps:          5       0       0       0
   672 ;;      Totals:         5       0       0       0
   673 ;;Total ram usage:        5 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; This function calls:
   676 ;;		Nothing
   677 ;; This function is called by:
   678 ;;		Interrupt level 1
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           
   683                           ;psect for function _isr
   684  0022                     _isr:	
   685                           
   686                           ;ServoController.c: 53: if (TMR2IF) {
   687  0022  1C8C               	btfss	12,1	;volatile
   688  0023  284C               	goto	i1l100
   689                           
   690                           ;ServoController.c: 54: ++sawtoothCounter;
   691  0024  3001               	movlw	1
   692  0025  00F5               	movwf	??_isr
   693  0026  0875               	movf	??_isr,w
   694  0027  07FA               	addwf	_sawtoothCounter,f	;volatile
   695                           
   696                           ;ServoController.c: 55: if (sawtoothCounter >= 180) {
   697  0028  30B4               	movlw	180
   698  0029  027A               	subwf	_sawtoothCounter,w	;volatile
   699  002A  1C03               	skipc
   700  002B  284B               	goto	i1l101
   701                           
   702                           ;ServoController.c: 56: if (sawtoothCounter >= 200) {
   703  002C  30C8               	movlw	200
   704  002D  027A               	subwf	_sawtoothCounter,w	;volatile
   705  002E  1C03               	skipc
   706  002F  2837               	goto	i1l630
   707                           
   708                           ;ServoController.c: 57: RA0 = 0;
   709  0030  1005               	bcf	5,0	;volatile
   710                           
   711                           ;ServoController.c: 58: RA1 = 0;
   712  0031  1085               	bcf	5,1	;volatile
   713                           
   714                           ;ServoController.c: 59: RA2 = 0;
   715  0032  1105               	bcf	5,2	;volatile
   716                           
   717                           ;ServoController.c: 60: RA3 = 0;
   718  0033  1185               	bcf	5,3	;volatile
   719                           
   720                           ;ServoController.c: 61: RA4 = 0;
   721  0034  1205               	bcf	5,4	;volatile
   722                           
   723                           ;ServoController.c: 63: sawtoothCounter = 0;
   724  0035  01FA               	clrf	_sawtoothCounter	;volatile
   725                           
   726                           ;ServoController.c: 64: } else {
   727  0036  284B               	goto	i1l101
   728  0037                     i1l630:	
   729                           
   730                           ;ServoController.c: 65: if (sawtoothCounter == eyebrowSliderVal) RA0 = 1;
   731  0037  087A               	movf	_sawtoothCounter,w	;volatile
   732  0038  0674               	xorwf	_eyebrowSliderVal,w	;volatile
   733  0039  1903               	btfsc	3,2
   734  003A  1405               	bsf	5,0	;volatile
   735                           
   736                           ;ServoController.c: 66: if (sawtoothCounter == leftLipCornerSliderVal) RA1 = 1;
   737  003B  087A               	movf	_sawtoothCounter,w	;volatile
   738  003C  0673               	xorwf	_leftLipCornerSliderVal,w	;volatile
   739  003D  1903               	btfsc	3,2
   740  003E  1485               	bsf	5,1	;volatile
   741                           
   742                           ;ServoController.c: 67: if (sawtoothCounter == rightLipCornerSliderVal) RA2 = 1;
   743  003F  087A               	movf	_sawtoothCounter,w	;volatile
   744  0040  0672               	xorwf	_rightLipCornerSliderVal,w	;volatile
   745  0041  1903               	btfsc	3,2
   746  0042  1505               	bsf	5,2	;volatile
   747                           
   748                           ;ServoController.c: 68: if (sawtoothCounter == lowerJawSliderVal) RA3 = 1;
   749  0043  087A               	movf	_sawtoothCounter,w	;volatile
   750  0044  0671               	xorwf	_lowerJawSliderVal,w	;volatile
   751  0045  1903               	btfsc	3,2
   752  0046  1585               	bsf	5,3	;volatile
   753                           
   754                           ;ServoController.c: 69: if (sawtoothCounter == eyelidsSliderVal) RA4 = 1;
   755  0047  087A               	movf	_sawtoothCounter,w	;volatile
   756  0048  0670               	xorwf	_eyelidsSliderVal,w	;volatile
   757  0049  1903               	btfsc	3,2
   758  004A  1605               	bsf	5,4	;volatile
   759  004B                     i1l101:	
   760                           
   761                           ;ServoController.c: 71: }
   762                           ;ServoController.c: 72: }
   763                           ;ServoController.c: 73: TMR2IF = 0;
   764  004B  108C               	bcf	12,1	;volatile
   765  004C                     i1l100:	
   766                           
   767                           ;ServoController.c: 74: }
   768                           ;ServoController.c: 75: if (RCIF) {
   769  004C  1E8C               	btfss	12,5	;volatile
   770  004D  28A7               	goto	i1l124
   771                           
   772                           ;ServoController.c: 76: ++receiveCounter;
   773  004E  3001               	movlw	1
   774  004F  00F5               	movwf	??_isr
   775  0050  0875               	movf	??_isr,w
   776  0051  07FB               	addwf	_receiveCounter,f	;volatile
   777                           
   778                           ;ServoController.c: 77: switch(receiveCounter) {
   779  0052  289C               	goto	i1l678
   780  0053                     i1l652:	
   781                           ;ServoController.c: 78: case 1:
   782                           
   783                           
   784                           ;ServoController.c: 79: RCREG = 0;
   785  0053  019A               	clrf	26	;volatile
   786                           
   787                           ;ServoController.c: 80: break;
   788  0054  28A7               	goto	i1l124
   789  0055                     i1l654:	
   790                           ;ServoController.c: 81: case 2:
   791                           
   792                           
   793                           ;ServoController.c: 82: part = RCREG;
   794  0055  081A               	movf	26,w	;volatile
   795  0056  00F5               	movwf	??_isr
   796  0057  0875               	movf	??_isr,w
   797  0058  00FC               	movwf	_part	;volatile
   798                           
   799                           ;ServoController.c: 83: break;
   800  0059  28A7               	goto	i1l124
   801  005A                     i1l656:	
   802                           ;ServoController.c: 84: case 3:
   803                           
   804                           
   805                           ;ServoController.c: 85: receiveCounter = 0;
   806  005A  01FB               	clrf	_receiveCounter	;volatile
   807                           
   808                           ;ServoController.c: 86: switch(part) {
   809  005B  2885               	goto	i1l672
   810  005C                     i1l658:	
   811                           ;ServoController.c: 87: case 0x3C: eyebrowSliderVal = (180 + (RCREG)); break;
   812                           
   813  005C  081A               	movf	26,w	;volatile
   814  005D  3EB4               	addlw	180
   815  005E  00F5               	movwf	??_isr
   816  005F  0875               	movf	??_isr,w
   817  0060  00F4               	movwf	_eyebrowSliderVal	;volatile
   818  0061  28A7               	goto	i1l124
   819  0062                     i1l660:	
   820                           ;ServoController.c: 88: case 0x3E: leftLipCornerSliderVal = (180 + (RCREG)); break;
   821                           
   822  0062  081A               	movf	26,w	;volatile
   823  0063  3EB4               	addlw	180
   824  0064  00F5               	movwf	??_isr
   825  0065  0875               	movf	??_isr,w
   826  0066  00F3               	movwf	_leftLipCornerSliderVal	;volatile
   827  0067  28A7               	goto	i1l124
   828  0068                     i1l662:	
   829                           ;ServoController.c: 89: case 0x40: rightLipCornerSliderVal = (180 + (RCREG)); break;
   830                           
   831  0068  081A               	movf	26,w	;volatile
   832  0069  3EB4               	addlw	180
   833  006A  00F5               	movwf	??_isr
   834  006B  0875               	movf	??_isr,w
   835  006C  00F2               	movwf	_rightLipCornerSliderVal	;volatile
   836  006D  28A7               	goto	i1l124
   837  006E                     i1l664:	
   838                           ;ServoController.c: 90: case 0x43: lowerJawSliderVal = (180 + (RCREG)); break;
   839                           
   840  006E  081A               	movf	26,w	;volatile
   841  006F  3EB4               	addlw	180
   842  0070  00F5               	movwf	??_isr
   843  0071  0875               	movf	??_isr,w
   844  0072  00F1               	movwf	_lowerJawSliderVal	;volatile
   845  0073  28A7               	goto	i1l124
   846  0074                     i1l666:	
   847                           ;ServoController.c: 91: case 0x45: eyelidsSliderVal = (180 + (RCREG)); break;
   848                           
   849  0074  081A               	movf	26,w	;volatile
   850  0075  3EB4               	addlw	180
   851  0076  00F5               	movwf	??_isr
   852  0077  0875               	movf	??_isr,w
   853  0078  00F0               	movwf	_eyelidsSliderVal	;volatile
   854  0079  28A7               	goto	i1l124
   855  007A                     i1l668:	
   856                           ;ServoController.c: 93: case 0x4A: RB5 = (RCREG > 0) ? 1 : 0; break;
   857                           
   858  007A  081A               	movf	26,w	;volatile
   859  007B  1903               	btfsc	3,2
   860  007C  2881               	goto	u12_20
   861  007D  1283               	bcf	3,5	;RP0=0, select bank0
   862  007E  1303               	bcf	3,6	;RP1=0, select bank0
   863  007F  1686               	bsf	6,5	;volatile
   864  0080  28A7               	goto	i1l124
   865  0081                     u12_20:	
   866  0081  1283               	bcf	3,5	;RP0=0, select bank0
   867  0082  1303               	bcf	3,6	;RP1=0, select bank0
   868  0083  1286               	bcf	6,5	;volatile
   869                           
   870                           ;ServoController.c: 94: }
   871  0084  28A7               	goto	i1l124
   872  0085                     i1l672:	
   873  0085  087C               	movf	_part,w	;volatile
   874                           
   875                           ; Switch size 1, requested type "space"
   876                           ; Number of cases is 6, Range of values is 60 to 74
   877                           ; switch strategies available:
   878                           ; Name         Instructions Cycles
   879                           ; simple_byte           19    10 (average)
   880                           ; direct_byte           24     9 (fixed)
   881                           ; jumptable            263     9 (fixed)
   882                           ;	Chosen strategy is simple_byte
   883  0086  3A3C               	xorlw	60	; case 60
   884  0087  1903               	skipnz
   885  0088  285C               	goto	i1l658
   886  0089  3A02               	xorlw	2	; case 62
   887  008A  1903               	skipnz
   888  008B  2862               	goto	i1l660
   889  008C  3A7E               	xorlw	126	; case 64
   890  008D  1903               	skipnz
   891  008E  2868               	goto	i1l662
   892  008F  3A03               	xorlw	3	; case 67
   893  0090  1903               	skipnz
   894  0091  286E               	goto	i1l664
   895  0092  3A06               	xorlw	6	; case 69
   896  0093  1903               	skipnz
   897  0094  2874               	goto	i1l666
   898  0095  3A0F               	xorlw	15	; case 74
   899  0096  1903               	skipnz
   900  0097  287A               	goto	i1l668
   901  0098  28A7               	goto	i1l124
   902                           
   903                           ;ServoController.c: 95: break;
   904  0099  28A7               	goto	i1l124
   905  009A                     i1l674:	
   906                           ;ServoController.c: 96: default:
   907                           
   908                           
   909                           ;ServoController.c: 97: receiveCounter = 0;
   910  009A  01FB               	clrf	_receiveCounter	;volatile
   911                           
   912                           ;ServoController.c: 99: }
   913                           
   914                           ;ServoController.c: 98: break;
   915  009B  28A7               	goto	i1l124
   916  009C                     i1l678:	
   917  009C  087B               	movf	_receiveCounter,w	;volatile
   918                           
   919                           ; Switch size 1, requested type "space"
   920                           ; Number of cases is 3, Range of values is 1 to 3
   921                           ; switch strategies available:
   922                           ; Name         Instructions Cycles
   923                           ; simple_byte           10     6 (average)
   924                           ; direct_byte           12     9 (fixed)
   925                           ; jumptable            263     9 (fixed)
   926                           ;	Chosen strategy is simple_byte
   927  009D  3A01               	xorlw	1	; case 1
   928  009E  1903               	skipnz
   929  009F  2853               	goto	i1l652
   930  00A0  3A03               	xorlw	3	; case 2
   931  00A1  1903               	skipnz
   932  00A2  2855               	goto	i1l654
   933  00A3  3A01               	xorlw	1	; case 3
   934  00A4  1903               	skipnz
   935  00A5  285A               	goto	i1l656
   936  00A6  289A               	goto	i1l674
   937  00A7                     i1l124:	
   938  00A7  0879               	movf	??_isr+4,w
   939  00A8  00FF               	movwf	127
   940  00A9  0878               	movf	??_isr+3,w
   941  00AA  008A               	movwf	10
   942  00AB  0877               	movf	??_isr+2,w
   943  00AC  0084               	movwf	4
   944  00AD  0E76               	swapf	(??_isr+1)^(0+-128),w
   945  00AE  0083               	movwf	3
   946  00AF  0EFE               	swapf	126,f
   947  00B0  0E7E               	swapf	126,w
   948  00B1  0009               	retfie
   949  00B2                     __end_of_isr:	
   950  007E                     btemp	set	126	;btemp
   951  007E                     wtemp0	set	126
   952                           
   953                           	psect	intentry
   954  0004                     __pintentry:	
   955                           ;incstack = 0
   956                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0]
   957                           
   958  0004                     interrupt_function:	
   959  007E                     saved_w	set	btemp
   960  0004  00FE               	movwf	btemp
   961  0005  0E03               	swapf	3,w
   962  0006  00F6               	movwf	??_isr+1
   963  0007  0804               	movf	4,w
   964  0008  00F7               	movwf	??_isr+2
   965  0009  080A               	movf	10,w
   966  000A  00F8               	movwf	??_isr+3
   967  000B  1283               	bcf	3,5	;RP0=0, select bank0
   968  000C  1303               	bcf	3,6	;RP1=0, select bank0
   969  000D  087F               	movf	btemp+1,w
   970  000E  00F9               	movwf	??_isr+4
   971  000F  2822               	ljmp	_isr


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      13
    BANK0            80      1       3
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_clearFramingError
    _main->_clearOverrunError

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                  _clearFramingError
                  _clearOverrunError
                         _initServos
                           _initTMR2
                          _initUSART
 ---------------------------------------------------------------------------------
 (1) _initUSART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTMR2                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initServos                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clearOverrunError                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _clearFramingError                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearFramingError
   _clearOverrunError
   _initServos
   _initTMR2
   _initUSART

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1       3       3        3.8%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      10      10        0.0%
ABS                  0      0      10       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 01 14:04:33 2018

                __CFG_CP$ON 0000                          l74 00D4                          l67 00C5  
               __CFG_CPD$ON 0000  __size_of_clearFramingError 000F                         l770 00BF  
                       l766 00BA                         _RA0 0028                         _RA1 0029  
                       _RA2 002A                         _RA3 002B                         _RA4 002C  
                       _RB5 0035                         _PR2 0092                         _isr 0022  
                       fsr0 0004                __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000  
                      ?_isr 0075                        _CREN 00C4                        _FERR 00C2  
                      _PIE1 008C                        _RCIF 0065                        _PIR1 000C  
                      _OERR 00C1                        _SPEN 00C7                        _main 00B2  
                      _part 007C                        btemp 007E               __CFG_BOREN$ON 0000  
                      start 0010                       ??_isr 0075                       ?_main 0075  
             __CFG_WDTE$OFF 0000                       _T2CON 0012                       i1l100 004C  
                     i1l101 004B                       i1l124 00A7                       i1l630 0037  
                     i1l660 0062                       i1l652 0053                       i1l662 0068  
                     i1l654 0055                       i1l664 006E                       i1l672 0085  
                     i1l656 005A                       i1l674 009A                       i1l666 0074  
                     i1l658 005C                       i1l668 007A                       i1l678 009C  
                     _RCREG 001A                       _RCSTA 0018                       u12_20 0081  
                     _SPBRG 0099                       _TXSTA 0098               __CFG_PWRTE$ON 0000  
                     pclath 000A                       status 0003                       wtemp0 007E  
            __CFG_MCLRE$OFF 0000             __initialization 0011                __end_of_main 00C5  
                    ??_main 0023                      _INTCON 000B                      _TMR2IF 0061  
                    _TRISA0 0428                      _TRISA1 0429                      _TRISA2 042A  
                    _TRISB0 0430                      _TRISB1 0431                      _TRISA3 042B  
                    _TRISB3 0433            __end_of_initTMR2 00FA                __pdataCOMMON 0070  
                    saved_w 007E       clearOverrunError@temp 0021     __end_of__initialization 0020  
          _eyebrowSliderVal 0074              __pcstackCOMMON 0075           _clearOverrunError 00C5  
        ?_clearOverrunError 0075         ??_clearOverrunError 0022                  __pbssBANK0 0020  
        __size_of_initUSART 000C                  __pmaintext 00B2                  __pintentry 0004  
 __end_of_clearOverrunError 00D4                   ?_initTMR2 0075                  _initServos 00FA  
          _eyelidsSliderVal 0070           __end_of_initUSART 00EF                     __ptext1 00E3  
                   __ptext2 00EF                     __ptext3 00FA                     __ptext4 00C5  
                   __ptext5 00D4                     __ptext6 0022                __size_of_isr 0090  
      end_of_initialization 0020             _sawtoothCounter 007A                  ??_initTMR2 0022  
__size_of_clearOverrunError 000F                 ?_initServos 0075           _lowerJawSliderVal 0071  
             __pidataCOMMON 0103         start_initialization 0011                 __end_of_isr 00B2  
    _leftLipCornerSliderVal 0073       clearFramingError@temp 0020                 __pbssCOMMON 007A  
                 ___latbits 0000               __pcstackBANK0 0022         __size_of_initServos 0009  
         __size_of_initTMR2 000B     _rightLipCornerSliderVal 0072                   _initUSART 00E3  
         interrupt_function 0004                  ?_initUSART 0075                ??_initServos 0022  
         _clearFramingError 00D4          ?_clearFramingError 0075                    _initTMR2 00EF  
        __end_of_initServos 0103         ??_clearFramingError 0022               __size_of_main 0013  
            _receiveCounter 007B   __end_of_clearFramingError 00E3                 ??_initUSART 0022  
                  intlevel1 0000  
